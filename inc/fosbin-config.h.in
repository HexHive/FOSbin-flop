#ifndef FOSBIN_CONFIG_H
#define FOSBIN_CONFIG_H

#define FOSBIN_VERSION_MAJOR @fosbin-VERSION-MAJOR@
#define FOSBIN_VERSION_MINOR @fosbin-VERSION-MINOR@

#include <iostream>
#include <string>
#include <memory>
#include <set>
#include <vector>
#include <cstddef>
#include <experimental/filesystem>
#include <FOSBinLogger.h>

namespace fs = std::experimental::filesystem;

typedef size_t arity_t;

namespace fbf {
/* This is copied from include/llvm/IR/Type.h. If this changes, then
 * those changes will have to be reflected here. It is just easier
 * to copy this enum than to try to figure out how to get the the
 * C++ file to link properly in a C program */
    typedef enum TypeID {
        // PrimitiveTypes - make sure LastPrimitiveTyID stays up to date.
        VoidTyID = 0,    ///<  0: type with no size
        HalfTyID,        ///<  1: 16-bit floating point type
        FloatTyID,       ///<  2: 32-bit floating point type
        DoubleTyID,      ///<  3: 64-bit floating point type
        X86_FP80TyID,    ///<  4: 80-bit floating point type (X87)
        FP128TyID,       ///<  5: 128-bit floating point type (112-bit mantissa)
        PPC_FP128TyID,   ///<  6: 128-bit floating point type (two 64-bits, PowerPC)
        LabelTyID,       ///<  7: Labels
        MetadataTyID,    ///<  8: Metadata
        X86_MMXTyID,     ///<  9: MMX vectors (64 bits, X86 specific)
        TokenTyID,       ///< 10: Tokens

        // Derived types... see DerivedTypes.h file.
        // Make sure FirstDerivedTyID stays up to date!
        IntegerTyID,     ///< 11: Arbitrary bit width integers
        FunctionTyID,    ///< 12: Functions
        StructTyID,      ///< 13: Structures
        ArrayTyID,       ///< 14: Arrays
        PointerTyID,     ///< 15: Pointers
        VectorTyID,      ///< 16: SIMD 'packed' format, or other vector type
    } TypeID;
}

#endif