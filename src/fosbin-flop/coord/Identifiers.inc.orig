std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> root = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(1.0000000000000882, 4.19620509157438e-07);
char* buf_0 = (char*) malloc(2);
if(buf_0) { buffers_.push_back(buf_0); std::memcpy(buf_0, "(nil)", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_1 = (char*) malloc(5);
if(buf_1) { buffers_.push_back(buf_1); std::memcpy(buf_1, "\x32\x31\x31\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_2 = (char*) malloc(1);
if(buf_2) { buffers_.push_back(buf_2); std::memcpy(buf_2, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int, int, char*>> node1 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int, int, char*>>(buf_0, buf_1, 3, 1, buf_2);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int>> node2 = std::make_shared<fbf::FunctionIdentifierInternalNode<int>>(1385108013);
char* buf_3 = (char*) malloc(2);
if(buf_3) { buffers_.push_back(buf_3); std::memcpy(buf_3, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_4 = (char*) malloc(1);
if(buf_4) { buffers_.push_back(buf_4); std::memcpy(buf_4, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int, char*>> node3 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int, char*>>(-1, buf_3, 909, buf_4);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node4 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(1.6526230020419812e+16, 64880750089.0, 1.5);
char* buf_5 = (char*) malloc(2);
if(buf_5) { buffers_.push_back(buf_5); std::memcpy(buf_5, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int>> node5 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int>>(0, buf_5, -1058570240);
char* buf_6 = (char*) malloc(4);
if(buf_6) { buffers_.push_back(buf_6); std::memcpy(buf_6, "\x34\x37\x00", 3); } else { throw std::runtime_error("malloc failed"); }
char* buf_7 = (char*) malloc(4);
if(buf_7) { buffers_.push_back(buf_7); std::memcpy(buf_7, "\x25\x59\x00", 3); } else { throw std::runtime_error("malloc failed"); }
char* buf_8 = (char*) malloc(1);
if(buf_8) { buffers_.push_back(buf_8); std::memcpy(buf_8, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int, char*, char*>> node6 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int, char*, char*>>(11, buf_6, 100, buf_7, buf_8);
char* buf_9 = (char*) malloc(305);
if(buf_9) { buffers_.push_back(buf_9); std::memcpy(buf_9, "\x2d\x30\x2e\x39\x39\x33\x38\x38\x38\x36\x35\x33\x39\x32\x33\x33\x37\x35\x32\x32\x30\x34\x32\x32\x35\x34\x32\x34\x39\x37\x35\x34\x34\x37\x38\x32\x32\x33\x36\x32\x31\x38\x34\x35\x32\x34\x35\x33\x36\x31\x33\x32\x38\x31\x32\x35\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x00", 304); } else { throw std::runtime_error("malloc failed"); }
char* buf_10 = (char*) malloc(1);
if(buf_10) { buffers_.push_back(buf_10); std::memcpy(buf_10, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, char*, char*>> node7 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, char*, char*>>(-0.9938886539233752, buf_9, buf_10);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node8 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.8074698485958225, -4.6082165116833e+59);
char* buf_11 = (char*) malloc(33);
if(buf_11) { buffers_.push_back(buf_11); std::memcpy(buf_11, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 32); } else { throw std::runtime_error("malloc failed"); }
char* buf_12 = (char*) malloc(5);
if(buf_12) { buffers_.push_back(buf_12); std::memcpy(buf_12, "\x01\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int>> node9 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int>>(buf_11, buf_12, 289);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node10 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(-1, 1814);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node11 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.49398530897300036, 0.8804502671006565);
char* buf_13 = (char*) malloc(1);
if(buf_13) { buffers_.push_back(buf_13); std::memcpy(buf_13, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node12 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(67802034, buf_13);
char* buf_14 = (char*) malloc(9);
if(buf_14) { buffers_.push_back(buf_14); std::memcpy(buf_14, "\x02\x00\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_15 = (char*) malloc(7);
if(buf_15) { buffers_.push_back(buf_15); std::memcpy(buf_15, "\x55\x54\x46\x2d\x38\x00", 6); } else { throw std::runtime_error("malloc failed"); }
char* buf_16 = (char*) malloc(13);
if(buf_16) { buffers_.push_back(buf_16); std::memcpy(buf_16, "\x69\x73\x6f\x2d\x38\x38\x35\x39\x2d\x31\x34\x00", 12); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*>> node13 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*>>(buf_14, buf_15, buf_16);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node14 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(0.0, 8.988465674311584e+307, 3.0);
char* buf_17 = (char*) malloc(34);
if(buf_17) { buffers_.push_back(buf_17); std::memcpy(buf_17, "\x30\x30\x30\x61\x30\x30\x30\x62\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x63\x30\x30\x30\x64\x30\x30\x30\x65\x30\x30\x30\x66\x00", 33); } else { throw std::runtime_error("malloc failed"); }
char* buf_18 = (char*) malloc(34);
if(buf_18) { buffers_.push_back(buf_18); std::memcpy(buf_18, "\x30\x30\x30\x61\x30\x30\x30\x62\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x63\x30\x30\x30\x64\x30\x30\x30\x65\x30\x30\x30\x66\x00", 33); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node15 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(0, buf_17, buf_18);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node16 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(131, 1);
char* buf_19 = (char*) malloc(9);
if(buf_19) { buffers_.push_back(buf_19); std::memcpy(buf_19, "\x61\x00\x62\x62\x00\x00\x61\x61", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_20 = (char*) malloc(2);
if(buf_20) { buffers_.push_back(buf_20); std::memcpy(buf_20, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_21 = (char*) malloc(3);
if(buf_21) { buffers_.push_back(buf_21); std::memcpy(buf_21, "\x61\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*, int>> node17 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*, int>>(buf_19, buf_20, buf_21, 5);
char* buf_22 = (char*) malloc(7);
if(buf_22) { buffers_.push_back(buf_22); std::memcpy(buf_22, "\x68\x65\x6c\x6c\x6f\x00", 6); } else { throw std::runtime_error("malloc failed"); }
char* buf_23 = (char*) malloc(1);
if(buf_23) { buffers_.push_back(buf_23); std::memcpy(buf_23, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node18 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(1, buf_22, buf_23);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node19 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.25044938407454437, 0.5617597462207241);
char* buf_24 = (char*) malloc(5);
if(buf_24) { buffers_.push_back(buf_24); std::memcpy(buf_24, "\x30\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_25 = (char*) malloc(5);
if(buf_25) { buffers_.push_back(buf_25); std::memcpy(buf_25, "\x25\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int, char*, double>> node20 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int, char*, double>>(1, buf_24, 2000, buf_25, 0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node21 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(1.5707963267948957, 1192764513177735.8);
char* buf_26 = (char*) malloc(52);
if(buf_26) { buffers_.push_back(buf_26); std::memcpy(buf_26, "\x25\x73\x3a\x25\x64\x3a\x20\x62\x61\x64\x20\x66\x70\x20\x65\x78\x63\x65\x70\x74\x69\x6f\x6e\x3a\x20\x25\x73\x20\x72\x6f\x75\x6e\x64\x66\x28\x25\x61\x29\x3d\x25\x61\x2c\x20\x77\x61\x6e\x74\x20\x25\x73\x00", 51); } else { throw std::runtime_error("malloc failed"); }
char* buf_27 = (char*) malloc(26);
if(buf_27) { buffers_.push_back(buf_27); std::memcpy(buf_27, "\x73\x72\x63\x2f\x6d\x61\x74\x68\x2f\x73\x61\x6e\x69\x74\x79\x2f\x72\x6f\x75\x6e\x64\x66\x2e\x68\x00", 25); } else { throw std::runtime_error("malloc failed"); }
char* buf_28 = (char*) malloc(4);
if(buf_28) { buffers_.push_back(buf_28); std::memcpy(buf_28, "\x52\x4e\x00", 3); } else { throw std::runtime_error("malloc failed"); }
char* buf_29 = (char*) malloc(9);
if(buf_29) { buffers_.push_back(buf_29); std::memcpy(buf_29, "\x49\x4e\x45\x58\x41\x43\x54\x00", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int, char*, double, double, char*>> node22 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int, char*, double, double, char*>>(94, buf_26, buf_27, 10, buf_28, -0.6787636876106262, -1.0, buf_29);
char* buf_30 = (char*) malloc(9);
if(buf_30) { buffers_.push_back(buf_30); std::memcpy(buf_30, "\x00\x00\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int, int, int, int, int, int>> node23 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int, int, int, int, int, int>>(buf_30, 0, -400293888, 0, 2, 5, 0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node24 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.002685964073984911, -0.0026859608443908474);
char* buf_31 = (char*) malloc(1);
if(buf_31) { buffers_.push_back(buf_31); std::memcpy(buf_31, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_32 = (char*) malloc(9);
if(buf_32) { buffers_.push_back(buf_32); std::memcpy(buf_32, "\xa4\x95\x1f\x03\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*>> node25 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*>>(buf_31, buf_32);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node26 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(1.160016203493322e-06, 1.160015530675047e-06);
char* buf_33 = (char*) malloc(9);
if(buf_33) { buffers_.push_back(buf_33); std::memcpy(buf_33, "\x24\x31\x24\x61\x61\x61\x61\x61", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_34 = (char*) malloc(22);
if(buf_34) { buffers_.push_back(buf_34); std::memcpy(buf_34, "\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x00", 21); } else { throw std::runtime_error("malloc failed"); }
char* buf_35 = (char*) malloc(26);
if(buf_35) { buffers_.push_back(buf_35); std::memcpy(buf_35, "\x24\x31\x24\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x24\x00", 25); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*>> node27 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*>>(buf_33, buf_34, buf_35);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node28 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.950982825498757, -0.050259276012273035);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node29 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(43.25235015076265, 6.08494980157565e+18);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, int>> node30 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, int>>(1.0, 0.00048828125, 11);
char* buf_36 = (char*) malloc(4);
if(buf_36) { buffers_.push_back(buf_36); std::memcpy(buf_36, "\x3f\x3f\x00", 3); } else { throw std::runtime_error("malloc failed"); }
char* buf_37 = (char*) malloc(3);
if(buf_37) { buffers_.push_back(buf_37); std::memcpy(buf_37, "\x2d\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node31 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(1, buf_36, buf_37, 0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node32 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(1.1090184093789704e-05, 1.1090184093562369e-05);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node33 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.2809493352806082, 0.7550665897480207);
char* buf_38 = (char*) malloc(9);
if(buf_38) { buffers_.push_back(buf_38); std::memcpy(buf_38, "\x00\x00\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int>> node34 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int>>(buf_38, 221);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node35 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(865.6600307980368, 3.8871859615316325e+260);
char* buf_39 = (char*) malloc(2);
if(buf_39) { buffers_.push_back(buf_39); std::memcpy(buf_39, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_40 = (char*) malloc(80);
if(buf_40) { buffers_.push_back(buf_40); std::memcpy(buf_40, "\x73\x72\x63\x2f\x66\x75\x6e\x63\x74\x69\x6f\x6e\x61\x6c\x2f\x70\x74\x68\x72\x65\x61\x64\x5f\x63\x61\x6e\x63\x65\x6c\x2e\x63\x3a\x39\x34\x3a\x20\x25\x73\x20\x66\x61\x69\x6c\x65\x64\x20\x28\x63\x6c\x65\x61\x6e\x75\x70\x20\x68\x61\x6e\x64\x6c\x65\x72\x20\x66\x61\x69\x6c\x65\x64\x20\x74\x6f\x20\x72\x75\x6e\x29\x0a\x00", 79); } else { throw std::runtime_error("malloc failed"); }
char* buf_41 = (char*) malloc(1);
if(buf_41) { buffers_.push_back(buf_41); std::memcpy(buf_41, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int, char*, char*>> node36 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int, char*, char*>>(87, buf_39, 512, buf_40, buf_41);
char* buf_42 = (char*) malloc(2);
if(buf_42) { buffers_.push_back(buf_42); std::memcpy(buf_42, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_43 = (char*) malloc(1);
if(buf_43) { buffers_.push_back(buf_43); std::memcpy(buf_43, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node37 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(301, buf_42, buf_43);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node38 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(1.7379144430160522, 1.7379144430160522);
char* buf_44 = (char*) malloc(33);
if(buf_44) { buffers_.push_back(buf_44); std::memcpy(buf_44, "\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x31\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x88\x6d\x00\x00\x00\x00\x00", 32); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*>> node39 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*>>(buf_44);
char* buf_45 = (char*) malloc(9);
if(buf_45) { buffers_.push_back(buf_45); std::memcpy(buf_45, "\x70\x51\x60\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_46 = (char*) malloc(5);
if(buf_46) { buffers_.push_back(buf_46); std::memcpy(buf_46, "\x7e\x3e\x40\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_47 = (char*) malloc(1);
if(buf_47) { buffers_.push_back(buf_47); std::memcpy(buf_47, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_48 = (char*) malloc(1);
if(buf_48) { buffers_.push_back(buf_48); std::memcpy(buf_48, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*, char*>> node40 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*, char*>>(buf_45, buf_46, buf_47, buf_48);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node41 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(8.815240927012887, 3.14);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node42 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(41981519197411.45, 1.5707963267948728);
char* buf_49 = (char*) malloc(1);
if(buf_49) { buffers_.push_back(buf_49); std::memcpy(buf_49, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_50 = (char*) malloc(1);
if(buf_50) { buffers_.push_back(buf_50); std::memcpy(buf_50, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node43 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(0, buf_49, buf_50, 11);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node44 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(1.7976931348623155e+308, 1.7976931348623157e+308, 0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int>> node45 = std::make_shared<fbf::FunctionIdentifierInternalNode<int>>(3326);
char* buf_51 = (char*) malloc(34);
if(buf_51) { buffers_.push_back(buf_51); std::memcpy(buf_51, "\x30\x30\x30\x61\x30\x30\x30\x62\x30\x30\x30\x63\x30\x30\x30\x64\x30\x30\x30\x65\x30\x30\x30\x66\x30\x30\x30\x30\x30\x30\x30\x30\x00", 33); } else { throw std::runtime_error("malloc failed"); }
char* buf_52 = (char*) malloc(26);
if(buf_52) { buffers_.push_back(buf_52); std::memcpy(buf_52, "\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x66\x66\x66\x66\x00", 25); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node46 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(49, buf_51, buf_52, 24);
char* buf_53 = (char*) malloc(9);
if(buf_53) { buffers_.push_back(buf_53); std::memcpy(buf_53, "\x6c\x69\x62\x00\x2f\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_54 = (char*) malloc(14);
if(buf_54) { buffers_.push_back(buf_54); std::memcpy(buf_54, "\x2f\x2f\x75\x73\x72\x2f\x2f\x6c\x69\x62\x2f\x2f\x00", 13); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*>> node47 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*>>(buf_53, buf_54);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node48 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(-1, 137);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node49 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(0.0, -1.0, -1.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node50 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(120.0, 6.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int, int>> node51 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int, int>>(0, 524289, 0, 15);
char* buf_55 = (char*) malloc(5);
if(buf_55) { buffers_.push_back(buf_55); std::memcpy(buf_55, "\x7f\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_56 = (char*) malloc(3);
if(buf_56) { buffers_.push_back(buf_56); std::memcpy(buf_56, "\x83\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_57 = (char*) malloc(1);
if(buf_57) { buffers_.push_back(buf_57); std::memcpy(buf_57, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int, char*>> node52 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int, char*>>(-1, buf_55, buf_56, 1, buf_57);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node53 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.9328848792746712, 37610.778793640384);
char* buf_58 = (char*) malloc(79);
if(buf_58) { buffers_.push_back(buf_58); std::memcpy(buf_58, "\x73\x72\x63\x2f\x66\x75\x6e\x63\x74\x69\x6f\x6e\x61\x6c\x2f\x66\x6e\x6d\x61\x74\x63\x68\x2e\x63\x3a\x31\x35\x39\x3a\x20\x66\x6e\x6d\x61\x74\x63\x68\x28\x22\x5b\x5b\x3f\x2a\x5c\x5d\x22\x2c\x20\x22\x5c\x22\x2c\x20\x30\x29\x20\x66\x61\x69\x6c\x65\x64\x2c\x20\x67\x6f\x74\x20\x31\x20\x77\x61\x6e\x74\x20\x30\x0a\x00", 78); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, int>> node54 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, int>>(77, 1, buf_58, 77);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node55 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-3.6893488147419103e+19, -1e-09);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node56 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(2.0, 8.0);
char* buf_59 = (char*) malloc(5);
if(buf_59) { buffers_.push_back(buf_59); std::memcpy(buf_59, "\x00\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, int>> node57 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, int>>(3589, 3589, buf_59, 0);
char* buf_60 = (char*) malloc(9);
if(buf_60) { buffers_.push_back(buf_60); std::memcpy(buf_60, "\x52\x65\x61\x6c\x2d\x74\x69\x6d", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int>> node58 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int>>(buf_60, 35);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node59 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.2455065313158208, 0.24798022903179104);
char* buf_61 = (char*) malloc(1);
if(buf_61) { buffers_.push_back(buf_61); std::memcpy(buf_61, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*>> node60 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*>>(0, -1601169664, buf_61);
char* buf_62 = (char*) malloc(7);
if(buf_62) { buffers_.push_back(buf_62); std::memcpy(buf_62, "\x31\x32\x20\x20\x20\x00", 6); } else { throw std::runtime_error("malloc failed"); }
char* buf_63 = (char*) malloc(6);
if(buf_63) { buffers_.push_back(buf_63); std::memcpy(buf_63, "\x25\x2e\x30\x64\x00", 5); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int, char*, int>> node61 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int, char*, int>>(0, buf_62, 2000, buf_63, 0);
char* buf_64 = (char*) malloc(19);
if(buf_64) { buffers_.push_back(buf_64); std::memcpy(buf_64, "\x31\x2e\x30\x30\x30\x30\x30\x30\x30\x30\x30\x30\x32\x65\x2b\x31\x34\x00", 18); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node62 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(17, buf_64);
char* buf_65 = (char*) malloc(3);
if(buf_65) { buffers_.push_back(buf_65); std::memcpy(buf_65, "\x61\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_66 = (char*) malloc(3);
if(buf_66) { buffers_.push_back(buf_66); std::memcpy(buf_66, "\x61\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node63 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(0, buf_65, buf_66);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double, double>> node64 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double, double>>(-38.56829972434721, 4.345239849338305, -8.88799136300345, 0.05215452675006225);
char* buf_67 = (char*) malloc(5);
if(buf_67) { buffers_.push_back(buf_67); std::memcpy(buf_67, "\x31\x30\x65\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_68 = (char*) malloc(5);
if(buf_68) { buffers_.push_back(buf_68); std::memcpy(buf_68, "\x25\x6c\x66\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_69 = (char*) malloc(9);
if(buf_69) { buffers_.push_back(buf_69); std::memcpy(buf_69, "\x00\x00\x00\x00\x00\x34\x32\x44", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*>> node65 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*>>(1, buf_67, buf_68, buf_69);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node66 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(1.7976931348623157e+308, 1.7976931348623157e+308);
char* buf_70 = (char*) malloc(11);
if(buf_70) { buffers_.push_back(buf_70); std::memcpy(buf_70, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 10); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, char*>> node67 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, char*>>(-0.4066039223853553, -0.4066039223853553, buf_70);
char* buf_71 = (char*) malloc(9);
if(buf_71) { buffers_.push_back(buf_71); std::memcpy(buf_71, "\x32\x35\x35\x2e\x32\x35\x35\x2e", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_72 = (char*) malloc(7);
if(buf_72) { buffers_.push_back(buf_72); std::memcpy(buf_72, "\xff\xff\xff\xff\x01\x00", 6); } else { throw std::runtime_error("malloc failed"); }
char* buf_73 = (char*) malloc(10);
if(buf_73) { buffers_.push_back(buf_73); std::memcpy(buf_73, "\x66\x66\x66\x66\x66\x66\x66\x66\x00", 9); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int, char*, char*, int>> node68 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int, char*, char*, int>>(buf_71, 2, buf_72, buf_73, 20);
char* buf_74 = (char*) malloc(9);
if(buf_74) { buffers_.push_back(buf_74); std::memcpy(buf_74, "\x62\x61\x62\x61\x62\x00\x73\x72", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_75 = (char*) malloc(8);
if(buf_75) { buffers_.push_back(buf_75); std::memcpy(buf_75, "\x61\x62\x61\x62\x61\x62\x00", 7); } else { throw std::runtime_error("malloc failed"); }
char* buf_76 = (char*) malloc(7);
if(buf_76) { buffers_.push_back(buf_76); std::memcpy(buf_76, "\x62\x61\x62\x61\x62\x00", 6); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*>> node69 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*>>(buf_74, buf_75, buf_76);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node70 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(0, 207062784);
char* buf_77 = (char*) malloc(9);
if(buf_77) { buffers_.push_back(buf_77); std::memcpy(buf_77, "\x00\x00\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int, int, int>> node71 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int, int, int>>(buf_77, 122748954, 0, 0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node72 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.7071067811865476, -0.34657359027997264);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node73 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(-2.967927037861625, -0.336137786950961, -1.9160482325201225);
char* buf_78 = (char*) malloc(3);
if(buf_78) { buffers_.push_back(buf_78); std::memcpy(buf_78, "\x41\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_79 = (char*) malloc(3);
if(buf_79) { buffers_.push_back(buf_79); std::memcpy(buf_79, "\x32\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node74 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(0, buf_78, buf_79, 1);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double, double>> node75 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double, double>>(1e-21, 1e-21, 0.4818361440385291, 1e-21);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, double>> node76 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, double>>(2147483647, 0.0);
char* buf_80 = (char*) malloc(1);
if(buf_80) { buffers_.push_back(buf_80); std::memcpy(buf_80, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node77 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(111, buf_80);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node78 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(3.6893488147419103e+19, 1e-09);
char* buf_81 = (char*) malloc(9);
if(buf_81) { buffers_.push_back(buf_81); std::memcpy(buf_81, "\x75\x73\x72\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_82 = (char*) malloc(6);
if(buf_82) { buffers_.push_back(buf_82); std::memcpy(buf_82, "\xc0\x8a\x95\x01\x00", 5); } else { throw std::runtime_error("malloc failed"); }
char* buf_83 = (char*) malloc(5);
if(buf_83) { buffers_.push_back(buf_83); std::memcpy(buf_83, "\x75\x73\x72\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*>> node79 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*>>(buf_81, buf_82, buf_83);
char* buf_84 = (char*) malloc(9);
if(buf_84) { buffers_.push_back(buf_84); std::memcpy(buf_84, "\xf0\x34\xec\x01\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_85 = (char*) malloc(1);
if(buf_85) { buffers_.push_back(buf_85); std::memcpy(buf_85, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_86 = (char*) malloc(1);
if(buf_86) { buffers_.push_back(buf_86); std::memcpy(buf_86, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_87 = (char*) malloc(8);
if(buf_87) { buffers_.push_back(buf_87); std::memcpy(buf_87, "\x88\xc9\xe4\x14\xff\x7f\x00", 7); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, char*>> node80 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, char*>>(0, buf_84, buf_85, buf_86, buf_87);
char* buf_88 = (char*) malloc(8);
if(buf_88) { buffers_.push_back(buf_88); std::memcpy(buf_88, "\x54\x45\x53\x54\x3d\x31\x00", 7); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node81 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(0, buf_88);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node82 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(6.450045556060236, -6.450045556060236, 0.6620717923376739);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node83 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.40996469255314455, 0.4345892280692081);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node84 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-371.33447471376144, -102.11555555618472);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node85 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(1.2272321957342842, 0.6619858980995045);
char* buf_89 = (char*) malloc(1);
if(buf_89) { buffers_.push_back(buf_89); std::memcpy(buf_89, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int, char*>> node86 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int, char*>>(0, 228, 0, buf_89);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node87 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(2.2418120372992743, 4.345239849338305);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int>> node88 = std::make_shared<fbf::FunctionIdentifierInternalNode<int>>(1);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node89 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(71712.72276655745, 9.267056966972586);
char* buf_90 = (char*) malloc(9);
if(buf_90) { buffers_.push_back(buf_90); std::memcpy(buf_90, "\xe0\x86\x7c\x01\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_91 = (char*) malloc(5);
if(buf_91) { buffers_.push_back(buf_91); std::memcpy(buf_91, "\xb4\xa2\x49\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_92 = (char*) malloc(1);
if(buf_92) { buffers_.push_back(buf_92); std::memcpy(buf_92, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_93 = (char*) malloc(1);
if(buf_93) { buffers_.push_back(buf_93); std::memcpy(buf_93, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*, char*>> node90 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*, char*>>(buf_90, buf_91, buf_92, buf_93);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node91 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(1.0, 0.6619858980995045);
char* buf_94 = (char*) malloc(15);
if(buf_94) { buffers_.push_back(buf_94); std::memcpy(buf_94, "\x30\x78\x2e\x31\x70\x34\x20\x20\x20\x20\x30\x31\x32\x00", 14); } else { throw std::runtime_error("malloc failed"); }
char* buf_95 = (char*) malloc(1);
if(buf_95) { buffers_.push_back(buf_95); std::memcpy(buf_95, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int, int, char*>> node92 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int, int, char*>>(1, buf_94, 13, 1, buf_95);
char* buf_96 = (char*) malloc(23);
if(buf_96) { buffers_.push_back(buf_96); std::memcpy(buf_96, "\x2f\x74\x6d\x70\x2f\x74\x65\x73\x74\x73\x75\x69\x74\x65\x2d\x76\x6f\x45\x79\x79\x6f\x00", 22); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node93 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(0, buf_96);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node94 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.15904195727192005, 9.267056966972586);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node95 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(6.531673581913484, -6.531673581913484);
char* buf_97 = (char*) malloc(22);
if(buf_97) { buffers_.push_back(buf_97); std::memcpy(buf_97, "\x3a\x3a\x66\x66\x66\x66\x3a\x31\x39\x32\x2e\x31\x36\x38\x2e\x35\x2e\x32\x32\x38\x00", 21); } else { throw std::runtime_error("malloc failed"); }
char* buf_98 = (char*) malloc(2);
if(buf_98) { buffers_.push_back(buf_98); std::memcpy(buf_98, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, char*>> node96 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, char*>>(1, 10, buf_97, buf_98);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node97 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(7046598812099149.0, 6302669750799301.0, 3151334452424340.0);
char* buf_99 = (char*) malloc(2);
if(buf_99) { buffers_.push_back(buf_99); std::memcpy(buf_99, "(nil)", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_100 = (char*) malloc(11);
if(buf_100) { buffers_.push_back(buf_100); std::memcpy(buf_100, "\x92\xce\xfc\xc6\x64\xf6\x5b\x9d\xfe\x3f", 10); } else { throw std::runtime_error("malloc failed"); }
char* buf_101 = (char*) malloc(11);
if(buf_101) { buffers_.push_back(buf_101); std::memcpy(buf_101, "\xb8\x88\xa6\x4e\x74\x08\xed\xc9\xfe\x3f", 10); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, double, char*, char*>> node98 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, double, char*, char*>>(buf_99, -0.4066039223853553, buf_100, buf_101);
char* buf_102 = (char*) malloc(9);
if(buf_102) { buffers_.push_back(buf_102); std::memcpy(buf_102, "\x63\x64\x00\x73\x72\x63\x2f\x66", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_103 = (char*) malloc(4);
if(buf_103) { buffers_.push_back(buf_103); std::memcpy(buf_103, "\x63\x64\x00", 3); } else { throw std::runtime_error("malloc failed"); }
char* buf_104 = (char*) malloc(2);
if(buf_104) { buffers_.push_back(buf_104); std::memcpy(buf_104, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_105 = (char*) malloc(9);
if(buf_105) { buffers_.push_back(buf_105); std::memcpy(buf_105, "\x04\x00\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_106 = (char*) malloc(1);
if(buf_106) { buffers_.push_back(buf_106); std::memcpy(buf_106, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*, char*, int, char*>> node99 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*, char*, int, char*>>(buf_102, buf_103, buf_104, buf_105, 80, buf_106);
char* buf_107 = (char*) malloc(2);
if(buf_107) { buffers_.push_back(buf_107); std::memcpy(buf_107, "(nil)", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_108 = (char*) malloc(9);
if(buf_108) { buffers_.push_back(buf_108); std::memcpy(buf_108, "\xfc\x5b\x64\x72\xbf\x4f\xd9\xbf", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_109 = (char*) malloc(9);
if(buf_109) { buffers_.push_back(buf_109); std::memcpy(buf_109, "\x17\xb1\x5c\x9a\x19\x64\xed\x3f", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, double, char*, char*>> node100 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, double, char*, char*>>(buf_107, 0.5617597462207241, buf_108, buf_109);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node101 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.7150139289952383, 0.7741522965913037);
char* buf_110 = (char*) malloc(1);
if(buf_110) { buffers_.push_back(buf_110); std::memcpy(buf_110, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int, char*>> node102 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int, char*>>(0, 819212, 0, buf_110);
char* buf_111 = (char*) malloc(9);
if(buf_111) { buffers_.push_back(buf_111); std::memcpy(buf_111, "\x30\x2e\x30\x2e\x30\x2e\x30\x00", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int>> node103 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int>>(buf_111, 0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node104 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.0, -16383.5);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node105 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(5.0, -3.0, 4.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node106 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.9999957568392429, -6.531673581913484);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node107 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(2.0, 0.0, 3.6893488147419103e+19);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node108 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(1.4142135623730951, 2.0000000000000004);
char* buf_112 = (char*) malloc(5);
if(buf_112) { buffers_.push_back(buf_112); std::memcpy(buf_112, "\x01\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double, char*>> node109 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double, char*>>(-0.0, -1.0, 1.0, buf_112);
char* buf_113 = (char*) malloc(2);
if(buf_113) { buffers_.push_back(buf_113); std::memcpy(buf_113, "(nil)", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_114 = (char*) malloc(5);
if(buf_114) { buffers_.push_back(buf_114); std::memcpy(buf_114, "\x50\xf0\x6e\xbf", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_115 = (char*) malloc(5);
if(buf_115) { buffers_.push_back(buf_115); std::memcpy(buf_115, "\x1c\xc9\xb7\xbe", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, double, char*, char*>> node110 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, double, char*, char*>>(buf_113, 2.0, buf_114, buf_115);
char* buf_116 = (char*) malloc(9);
if(buf_116) { buffers_.push_back(buf_116); std::memcpy(buf_116, "\x63\x20\x61\x62\x63\x00\x62\x62", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_117 = (char*) malloc(9);
if(buf_117) { buffers_.push_back(buf_117); std::memcpy(buf_117, "\x61\x62\x63\x20\x61\x62\x63\x00", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int>> node111 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int>>(buf_116, buf_117, 99);
char* buf_118 = (char*) malloc(5);
if(buf_118) { buffers_.push_back(buf_118); std::memcpy(buf_118, "\x34\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_119 = (char*) malloc(1);
if(buf_119) { buffers_.push_back(buf_119); std::memcpy(buf_119, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node112 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(-1, buf_118, buf_119, 0);
char* buf_120 = (char*) malloc(3);
if(buf_120) { buffers_.push_back(buf_120); std::memcpy(buf_120, "\x78\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_121 = (char*) malloc(1);
if(buf_121) { buffers_.push_back(buf_121); std::memcpy(buf_121, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, int, int, char*, int>> node113 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, int, int, char*, int>>(1, 6, buf_120, 1, 0, buf_121, 16);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node114 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(0.0, 3.6893488147419103e+19, 0.0);
char* buf_122 = (char*) malloc(1);
if(buf_122) { buffers_.push_back(buf_122); std::memcpy(buf_122, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_123 = (char*) malloc(1);
if(buf_123) { buffers_.push_back(buf_123); std::memcpy(buf_123, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_124 = (char*) malloc(1);
if(buf_124) { buffers_.push_back(buf_124); std::memcpy(buf_124, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*>> node115 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*>>(-1, buf_122, buf_123, buf_124);
char* buf_125 = (char*) malloc(9);
if(buf_125) { buffers_.push_back(buf_125); std::memcpy(buf_125, "\x50\xb8\x7c\x01\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_126 = (char*) malloc(5);
if(buf_126) { buffers_.push_back(buf_126); std::memcpy(buf_126, "\x9f\x8b\x4a\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_127 = (char*) malloc(1);
if(buf_127) { buffers_.push_back(buf_127); std::memcpy(buf_127, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_128 = (char*) malloc(1);
if(buf_128) { buffers_.push_back(buf_128); std::memcpy(buf_128, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*, char*>> node116 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*, char*>>(buf_125, buf_126, buf_127, buf_128);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double, double>> node117 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double, double>>(-0.0, 2.0, 0.0, -3.6893488147419103e+19);
char* buf_129 = (char*) malloc(1);
if(buf_129) { buffers_.push_back(buf_129); std::memcpy(buf_129, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_130 = (char*) malloc(5);
if(buf_130) { buffers_.push_back(buf_130); std::memcpy(buf_130, "\x00\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node118 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(0, buf_129, buf_130);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node119 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(-1.75, -1.75, -0.5);
char* buf_131 = (char*) malloc(12);
if(buf_131) { buffers_.push_back(buf_131); std::memcpy(buf_131, "\x31\x2e\x32\x2e\x30\x78\x33\x33\x2e\x34\x00", 11); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node120 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(70451713, buf_131);
char* buf_132 = (char*) malloc(5);
if(buf_132) { buffers_.push_back(buf_132); std::memcpy(buf_132, "\xff\xff\xff\xff", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, char*>> node121 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, char*>>(-6.446407700672529, -6.531673581913484, buf_132);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int>> node122 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int>>(0, 5, 0);
char* buf_133 = (char*) malloc(2);
if(buf_133) { buffers_.push_back(buf_133); std::memcpy(buf_133, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_134 = (char*) malloc(1);
if(buf_134) { buffers_.push_back(buf_134); std::memcpy(buf_134, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int, int, char*>> node123 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int, int, char*>>(0, buf_133, 1, 1, buf_134);
char* buf_135 = (char*) malloc(33);
if(buf_135) { buffers_.push_back(buf_135); std::memcpy(buf_135, "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 32); } else { throw std::runtime_error("malloc failed"); }
char* buf_136 = (char*) malloc(5);
if(buf_136) { buffers_.push_back(buf_136); std::memcpy(buf_136, "\x61\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_137 = (char*) malloc(5);
if(buf_137) { buffers_.push_back(buf_137); std::memcpy(buf_137, "\x62\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*>> node124 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*>>(buf_135, buf_136, buf_137);
char* buf_138 = (char*) malloc(2);
if(buf_138) { buffers_.push_back(buf_138); std::memcpy(buf_138, "(nil)", 1); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int>> node125 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int>>(buf_138, 3);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node126 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(0.5, 1.5, 1.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node127 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(40, 61);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node128 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(3.6893488147419103e+19, -3.6893488147419103e+19);
char* buf_139 = (char*) malloc(9);
if(buf_139) { buffers_.push_back(buf_139); std::memcpy(buf_139, "\x55\x48\x89\xe5\x48\x8b\x05\xf5", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_140 = (char*) malloc(2);
if(buf_140) { buffers_.push_back(buf_140); std::memcpy(buf_140, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_141 = (char*) malloc(3);
if(buf_141) { buffers_.push_back(buf_141); std::memcpy(buf_141, "\x66\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*>> node129 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*>>(buf_139, buf_140, buf_141);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node130 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-2182.630750514553, -8.38143342755525);
char* buf_142 = (char*) malloc(41);
if(buf_142) { buffers_.push_back(buf_142); std::memcpy(buf_142, "\x33\x34\x30\x32\x38\x32\x33\x35\x36\x37\x37\x39\x37\x33\x33\x36\x36\x31\x36\x33\x37\x35\x33\x39\x33\x39\x35\x34\x35\x38\x31\x34\x32\x35\x36\x38\x34\x34\x38\x00", 40); } else { throw std::runtime_error("malloc failed"); }
char* buf_143 = (char*) malloc(1);
if(buf_143) { buffers_.push_back(buf_143); std::memcpy(buf_143, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, char*, char*>> node131 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, char*, char*>>(0.0, buf_142, buf_143);
char* buf_144 = (char*) malloc(9);
if(buf_144) { buffers_.push_back(buf_144); std::memcpy(buf_144, "\x00\x00\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_145 = (char*) malloc(1);
if(buf_145) { buffers_.push_back(buf_145); std::memcpy(buf_145, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_146 = (char*) malloc(1);
if(buf_146) { buffers_.push_back(buf_146); std::memcpy(buf_146, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_147 = (char*) malloc(1);
if(buf_147) { buffers_.push_back(buf_147); std::memcpy(buf_147, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, char*>> node132 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, char*>>(0, buf_144, buf_145, buf_146, buf_147);
char* buf_148 = (char*) malloc(28);
if(buf_148) { buffers_.push_back(buf_148); std::memcpy(buf_148, "\x49\x4e\x45\x58\x41\x43\x54\x7c\x55\x4e\x44\x45\x52\x46\x4c\x4f\x57\x7c\x4f\x56\x45\x52\x46\x4c\x4f\x57\x00", 27); } else { throw std::runtime_error("malloc failed"); }
char* buf_149 = (char*) malloc(4);
if(buf_149) { buffers_.push_back(buf_149); std::memcpy(buf_149, "\x25\x73\x00", 3); } else { throw std::runtime_error("malloc failed"); }
char* buf_150 = (char*) malloc(3);
if(buf_150) { buffers_.push_back(buf_150); std::memcpy(buf_150, "\x30\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*>> node133 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*>>(1, buf_148, buf_149, buf_150);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node134 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(0.0, -2.0, -0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, int, double>> node135 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, int, double>>(0.005879999242011018, 3, 0.6619858980995045);
char* buf_151 = (char*) malloc(1);
if(buf_151) { buffers_.push_back(buf_151); std::memcpy(buf_151, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_152 = (char*) malloc(7);
if(buf_152) { buffers_.push_back(buf_152); std::memcpy(buf_152, "\x68\x65\x6c\x6c\x6f\x00", 6); } else { throw std::runtime_error("malloc failed"); }
char* buf_153 = (char*) malloc(4);
if(buf_153) { buffers_.push_back(buf_153); std::memcpy(buf_153, "\x61\x2b\x00", 3); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int, char*>> node136 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int, char*>>(buf_151, buf_152, 10, buf_153);
char* buf_154 = (char*) malloc(9);
if(buf_154) { buffers_.push_back(buf_154); std::memcpy(buf_154, "\x68\x65\x6c\x6c\x6f\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_155 = (char*) malloc(6);
if(buf_155) { buffers_.push_back(buf_155); std::memcpy(buf_155, "\xac\xf4\xfc\x7f\x00", 5); } else { throw std::runtime_error("malloc failed"); }
char* buf_156 = (char*) malloc(1);
if(buf_156) { buffers_.push_back(buf_156); std::memcpy(buf_156, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int, char*>> node137 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int, char*>>(buf_154, buf_155, 6, buf_156);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, int>> node138 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, int>>(-1.0, -4.34e-19, 61);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node139 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.1509567817439821, 9.267056966972586);
char* buf_157 = (char*) malloc(9);
if(buf_157) { buffers_.push_back(buf_157); std::memcpy(buf_157, "\x00\x00\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_158 = (char*) malloc(12);
if(buf_158) { buffers_.push_back(buf_158); std::memcpy(buf_158, "\x30\x78\x38\x70\x2d\x31\x36\x33\x38\x35\x00", 11); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int, int>> node140 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int, int>>(buf_157, buf_158, 0, 32);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node141 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(1.0, -1.0, 1.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node142 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-6.0, -6.531673581913484);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, double>> node143 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, double>>(0, -1.2676506002282294e+30);
char* buf_159 = (char*) malloc(5);
if(buf_159) { buffers_.push_back(buf_159); std::memcpy(buf_159, "\x2d\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_160 = (char*) malloc(1);
if(buf_160) { buffers_.push_back(buf_160); std::memcpy(buf_160, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node144 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(0, buf_159, buf_160, 0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, int, double>> node145 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, int, double>>(-0.0, -1, -0.0);
char* buf_161 = (char*) malloc(9);
if(buf_161) { buffers_.push_back(buf_161); std::memcpy(buf_161, "\x49\x00\x00\x00\x79\x1a\xdb\xf4", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_162 = (char*) malloc(3);
if(buf_162) { buffers_.push_back(buf_162); std::memcpy(buf_162, "\x49\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*>> node146 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*>>(buf_161, buf_162);
char* buf_163 = (char*) malloc(34);
if(buf_163) { buffers_.push_back(buf_163); std::memcpy(buf_163, "\x73\x72\x63\x2f\x66\x75\x6e\x63\x74\x69\x6f\x6e\x61\x6c\x2f\x73\x74\x72\x69\x6e\x67\x2d\x73\x74\x61\x74\x69\x63\x2e\x65\x78\x65\x00", 33); } else { throw std::runtime_error("malloc failed"); }
char* buf_164 = (char*) malloc(1);
if(buf_164) { buffers_.push_back(buf_164); std::memcpy(buf_164, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node147 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(-1, buf_163, buf_164);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node148 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(3.6893488147419103e+19, -2.0);
char* buf_165 = (char*) malloc(2);
if(buf_165) { buffers_.push_back(buf_165); std::memcpy(buf_165, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node149 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(0, buf_165);
char* buf_166 = (char*) malloc(9);
if(buf_166) { buffers_.push_back(buf_166); std::memcpy(buf_166, "\x00\x00\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_167 = (char*) malloc(7);
if(buf_167) { buffers_.push_back(buf_167); std::memcpy(buf_167, "\x61\x62\x62\x61\x62\x00", 6); } else { throw std::runtime_error("malloc failed"); }
char* buf_168 = (char*) malloc(5);
if(buf_168) { buffers_.push_back(buf_168); std::memcpy(buf_168, "\x62\x61\x62\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int, char*, int>> node150 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int, char*, int>>(buf_166, buf_167, 4, buf_168, 3);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node151 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.20952521615327477, -0.6787637026394024);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node152 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(-0.016443286217702822, 7.858890253041697, 0.05215452675006225);
char* buf_169 = (char*) malloc(5);
if(buf_169) { buffers_.push_back(buf_169); std::memcpy(buf_169, "\x30\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node153 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(1, buf_169);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node154 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.8853748109312745, 0.7741522965913037);
char* buf_170 = (char*) malloc(1);
if(buf_170) { buffers_.push_back(buf_170); std::memcpy(buf_170, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_171 = (char*) malloc(1);
if(buf_171) { buffers_.push_back(buf_171); std::memcpy(buf_171, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, char*>> node155 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, char*>>(0, 2, buf_170, buf_171);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node156 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(3.3113691542e-11, 3.3113691542e-11);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node157 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(-1.5707963267948966, -1.0, -0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node158 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(-0.0906114154164843, -8.38143342755525, -2.763607337379588);
char* buf_172 = (char*) malloc(7);
if(buf_172) { buffers_.push_back(buf_172); std::memcpy(buf_172, "\x31\x65\x2b\x31\x32\x00", 6); } else { throw std::runtime_error("malloc failed"); }
char* buf_173 = (char*) malloc(7);
if(buf_173) { buffers_.push_back(buf_173); std::memcpy(buf_173, "\x31\x65\x2b\x31\x32\x00", 6); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node159 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(0, buf_172, buf_173, 6);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node160 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(-0.0, 0.0, -2.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node161 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(0, 2);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, double>> node162 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, double>>(2, 0.0);
char* buf_174 = (char*) malloc(5);
if(buf_174) { buffers_.push_back(buf_174); std::memcpy(buf_174, "\x04\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, char*>> node163 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, char*>>(-0.0, -0.0, buf_174);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node164 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.0, 9.267056966972586);
char* buf_175 = (char*) malloc(5);
if(buf_175) { buffers_.push_back(buf_175); std::memcpy(buf_175, "\x01\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, char*>> node165 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, char*>>(-3.6893488147419103e+19, -0.0, buf_175);
char* buf_176 = (char*) malloc(1);
if(buf_176) { buffers_.push_back(buf_176); std::memcpy(buf_176, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, int>> node166 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, int>>(0, 458753, buf_176, 1);
char* buf_177 = (char*) malloc(1);
if(buf_177) { buffers_.push_back(buf_177); std::memcpy(buf_177, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_178 = (char*) malloc(9);
if(buf_178) { buffers_.push_back(buf_178); std::memcpy(buf_178, "\x7a\x79\x78\x20\x61\x62\x63\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_179 = (char*) malloc(1);
if(buf_179) { buffers_.push_back(buf_179); std::memcpy(buf_179, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int, char*, int>> node167 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int, char*, int>>(0, buf_177, buf_178, 1, buf_179, 0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node168 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.3131898206556526, 0.6619858980995045);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int, int>> node169 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int, int>>(122814490, 1745166170, 0, 0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node170 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.45268787679702194, 1.1042249363786338);
char* buf_180 = (char*) malloc(1);
if(buf_180) { buffers_.push_back(buf_180); std::memcpy(buf_180, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node171 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(7, buf_180);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int>> node172 = std::make_shared<fbf::FunctionIdentifierInternalNode<int>>(2048);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node173 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.0, 1e-09);
char* buf_181 = (char*) malloc(1);
if(buf_181) { buffers_.push_back(buf_181); std::memcpy(buf_181, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_182 = (char*) malloc(6);
if(buf_182) { buffers_.push_back(buf_182); std::memcpy(buf_182, "\x25\x5b\x78\x5d\x00", 5); } else { throw std::runtime_error("malloc failed"); }
char* buf_183 = (char*) malloc(16);
if(buf_183) { buffers_.push_back(buf_183); std::memcpy(buf_183, "\x78\x68\x65\x6c\x6c\x6f\x2c\x20\x77\x6f\x72\x6c\x64\x0a\x00", 15); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*>> node174 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*>>(0, buf_181, buf_182, buf_183);
char* buf_184 = (char*) malloc(23);
if(buf_184) { buffers_.push_back(buf_184); std::memcpy(buf_184, "\x2f\x74\x6d\x70\x2f\x74\x65\x73\x74\x73\x75\x69\x74\x65\x2d\x58\x58\x58\x58\x58\x58\x00", 22); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node175 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(5, buf_184);
char* buf_185 = (char*) malloc(3);
if(buf_185) { buffers_.push_back(buf_185); std::memcpy(buf_185, "\x02\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_186 = (char*) malloc(1);
if(buf_186) { buffers_.push_back(buf_186); std::memcpy(buf_186, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_187 = (char*) malloc(9);
if(buf_187) { buffers_.push_back(buf_187); std::memcpy(buf_187, "\x96\x01\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_188 = (char*) malloc(1);
if(buf_188) { buffers_.push_back(buf_188); std::memcpy(buf_188, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_189 = (char*) malloc(9);
if(buf_189) { buffers_.push_back(buf_189); std::memcpy(buf_189, "\x00\x01\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, char*, char*>> node176 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, char*, char*>>(0, buf_185, buf_186, buf_187, buf_188, buf_189);
char* buf_190 = (char*) malloc(2);
if(buf_190) { buffers_.push_back(buf_190); std::memcpy(buf_190, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*>> node177 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*>>(0, 1, buf_190);
char* buf_191 = (char*) malloc(5);
if(buf_191) { buffers_.push_back(buf_191); std::memcpy(buf_191, "\xfe\xff\xff\xff", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double, char*>> node178 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double, char*>>(-0.0, -0.0, -2.0, buf_191);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node179 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.6146844860113447, 0.6619858980995045);
char* buf_192 = (char*) malloc(3);
if(buf_192) { buffers_.push_back(buf_192); std::memcpy(buf_192, "\xa9\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, int, int>> node180 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, int, int>>(1, 5, buf_192, 1, 0);
char* buf_193 = (char*) malloc(5);
if(buf_193) { buffers_.push_back(buf_193); std::memcpy(buf_193, "\x01\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, char*>> node181 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, char*>>(1.3084034916546488, -0.4066039223853553, buf_193);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node182 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(4.0, 4.345239849338305);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, int>> node183 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, int>>(0.0, 0.0, 1);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node184 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(3.0, -8.06684839057968);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, int>> node185 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, int>>(0.0, 0.0, -2147483647);
char* buf_194 = (char*) malloc(3);
if(buf_194) { buffers_.push_back(buf_194); std::memcpy(buf_194, "\x7a\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_195 = (char*) malloc(1);
if(buf_195) { buffers_.push_back(buf_195); std::memcpy(buf_195, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node186 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(35, buf_194, buf_195, 36);
char* buf_196 = (char*) malloc(9);
if(buf_196) { buffers_.push_back(buf_196); std::memcpy(buf_196, "\x31\x00\x73\x72\x63\x2f\x66\x75", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_197 = (char*) malloc(6);
if(buf_197) { buffers_.push_back(buf_197); std::memcpy(buf_197, "\x54\x45\x53\x54\x00", 5); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*>> node187 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*>>(buf_196, buf_197);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, double>> node188 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, double>>(9, -2.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int>> node189 = std::make_shared<fbf::FunctionIdentifierInternalNode<int>>(89401895);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, double>> node190 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, double>>(3, -8.38143342755525);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node191 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-1.0, -8.06684839057968);
char* buf_198 = (char*) malloc(5);
if(buf_198) { buffers_.push_back(buf_198); std::memcpy(buf_198, "\x0f\x11\x96\x2b", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_199 = (char*) malloc(1);
if(buf_199) { buffers_.push_back(buf_199); std::memcpy(buf_199, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_200 = (char*) malloc(1);
if(buf_200) { buffers_.push_back(buf_200); std::memcpy(buf_200, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int, char*>> node192 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int, char*>>(3, buf_198, buf_199, 3, buf_200);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node193 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(-2.0, -3.6893488147419103e+19, 0.05215452675006225);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node194 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(1.0, -1.0, 0.0);
char* buf_201 = (char*) malloc(9);
if(buf_201) { buffers_.push_back(buf_201); std::memcpy(buf_201, "\x00\x70\xe1\x2b\xe2\x7f\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_202 = (char*) malloc(30);
if(buf_202) { buffers_.push_back(buf_202); std::memcpy(buf_202, "\x73\x72\x63\x2f\x66\x75\x6e\x63\x74\x69\x6f\x6e\x61\x6c\x2f\x64\x6c\x6f\x70\x65\x6e\x5f\x64\x73\x6f\x2e\x73\x6f\x00", 29); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int>> node195 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int>>(buf_201, buf_202, 1);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node196 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.9996862293931839, -8.06684839057968);
char* buf_203 = (char*) malloc(1);
if(buf_203) { buffers_.push_back(buf_203); std::memcpy(buf_203, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_204 = (char*) malloc(5);
if(buf_204) { buffers_.push_back(buf_204); std::memcpy(buf_204, "\x10\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, char*>> node197 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, char*>>(0, 5, buf_203, buf_204);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int, int>> node198 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int, int>>(5, 2, 524289, 6);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node199 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(2.0, 2.0, 0.0);
char* buf_205 = (char*) malloc(1);
if(buf_205) { buffers_.push_back(buf_205); std::memcpy(buf_205, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_206 = (char*) malloc(1);
if(buf_206) { buffers_.push_back(buf_206); std::memcpy(buf_206, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int, char*>> node200 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int, char*>>(buf_205, 17, buf_206);
char* buf_207 = (char*) malloc(9);
if(buf_207) { buffers_.push_back(buf_207); std::memcpy(buf_207, "\x00\x00\x00\x00\x00\x00\xf0\x3f", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, char*>> node201 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, char*>>(-0.0, -1.0, buf_207);
char* buf_208 = (char*) malloc(9);
if(buf_208) { buffers_.push_back(buf_208); std::memcpy(buf_208, "\x73\x72\x63\x2f\x66\x75\x6e\x63", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*>> node202 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*>>(buf_208);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int>> node203 = std::make_shared<fbf::FunctionIdentifierInternalNode<int>>(31039);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node204 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(-2.0, -2.0, -0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node205 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-2.0, 0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int>> node206 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int>>(0, 31138, 9);
char* buf_209 = (char*) malloc(5);
if(buf_209) { buffers_.push_back(buf_209); std::memcpy(buf_209, "\x00\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, char*>> node207 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, char*>>(0.7741522965913037, 0.7741522965913037, buf_209);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node208 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.6854215158636222, 0.7741522965913037);
char* buf_210 = (char*) malloc(1);
if(buf_210) { buffers_.push_back(buf_210); std::memcpy(buf_210, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_211 = (char*) malloc(12);
if(buf_211) { buffers_.push_back(buf_211); std::memcpy(buf_211, "\x65\x63\x68\x6f\x20\x68\x65\x6c\x6c\x6f\x00", 11); } else { throw std::runtime_error("malloc failed"); }
char* buf_212 = (char*) malloc(3);
if(buf_212) { buffers_.push_back(buf_212); std::memcpy(buf_212, "\x72\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*>> node209 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*>>(buf_210, buf_211, buf_212);
char* buf_213 = (char*) malloc(11);
if(buf_213) { buffers_.push_back(buf_213); std::memcpy(buf_213, "\x74\x65\x73\x74\x20\x64\x61\x74\x61\x00", 10); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node210 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(0, buf_213);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node211 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.23363500351853098, 0.6619858980995045);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node212 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.0, -2.0);
char* buf_214 = (char*) malloc(2);
if(buf_214) { buffers_.push_back(buf_214); std::memcpy(buf_214, "(nil)", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_215 = (char*) malloc(6);
if(buf_215) { buffers_.push_back(buf_215); std::memcpy(buf_215, "\xe0\xb7\x3a\x01\x00", 5); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*>> node213 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*>>(buf_214, buf_215);
char* buf_216 = (char*) malloc(7);
if(buf_216) { buffers_.push_back(buf_216); std::memcpy(buf_216, "\x02\x70\x71\xc0\x05\x00", 6); } else { throw std::runtime_error("malloc failed"); }
char* buf_217 = (char*) malloc(3);
if(buf_217) { buffers_.push_back(buf_217); std::memcpy(buf_217, "\x6b\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_218 = (char*) malloc(7);
if(buf_218) { buffers_.push_back(buf_218); std::memcpy(buf_218, "\x02\x70\x71\xc0\x05\x00", 6); } else { throw std::runtime_error("malloc failed"); }
char* buf_219 = (char*) malloc(6);
if(buf_219) { buffers_.push_back(buf_219); std::memcpy(buf_219, "\x58\x58\x58\x58\x00", 5); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, char*, int>> node214 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, char*, int>>(5, buf_216, buf_217, buf_218, buf_219, 3);
char* buf_220 = (char*) malloc(1);
if(buf_220) { buffers_.push_back(buf_220); std::memcpy(buf_220, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_221 = (char*) malloc(1);
if(buf_221) { buffers_.push_back(buf_221); std::memcpy(buf_221, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_222 = (char*) malloc(9);
if(buf_222) { buffers_.push_back(buf_222); std::memcpy(buf_222, "\x70\x92\x40\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*>> node215 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*>>(buf_220, buf_221, buf_222);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node216 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(0.0, 0.0, -1.2676506002282294e+30);
char* buf_223 = (char*) malloc(3);
if(buf_223) { buffers_.push_back(buf_223); std::memcpy(buf_223, "\x01\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, int, int>> node217 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, int, int>>(0, 819212, buf_223, 20, 2048);
char* buf_224 = (char*) malloc(9);
if(buf_224) { buffers_.push_back(buf_224); std::memcpy(buf_224, "\x2e\x00\x43\x6f\x75\x6c\x64\x20", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_225 = (char*) malloc(6);
if(buf_225) { buffers_.push_back(buf_225); std::memcpy(buf_225, "\x75\x73\x72\x2f\x00", 5); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*>> node218 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*>>(buf_224, buf_225);
char* buf_226 = (char*) malloc(88);
if(buf_226) { buffers_.push_back(buf_226); std::memcpy(buf_226, "\x2e\x33\x33\x36\x32\x31\x30\x33\x31\x34\x33\x31\x31\x32\x30\x39\x33\x35\x30\x36\x34\x34\x34\x39\x33\x37\x37\x39\x33\x39\x31\x35\x38\x37\x36\x33\x33\x32\x37\x32\x34\x34\x39\x39\x36\x34\x31\x35\x32\x37\x34\x34\x32\x32\x33\x30\x39\x32\x38\x37\x37\x39\x37\x37\x30\x35\x39\x33\x34\x32\x30\x38\x36\x36\x35\x37\x36\x37\x37\x38\x65\x2d\x34\x39\x33\x31\x00", 87); } else { throw std::runtime_error("malloc failed"); }
char* buf_227 = (char*) malloc(1);
if(buf_227) { buffers_.push_back(buf_227); std::memcpy(buf_227, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, char*, char*>> node219 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, char*, char*>>(0.0, buf_226, buf_227);
char* buf_228 = (char*) malloc(23);
if(buf_228) { buffers_.push_back(buf_228); std::memcpy(buf_228, "\x2f\x74\x6d\x70\x2f\x74\x65\x73\x74\x73\x75\x69\x74\x65\x2d\x4e\x59\x4f\x50\x6a\x75\x00", 22); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int>> node220 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int>>(5, buf_228, 1);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int>> node221 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int>>(819212, 1829052250, 0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, int, double>> node222 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, int, double>>(0.0, -1, 0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node223 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-1.1355782978128566, -0.6787637026394024);
char* buf_229 = (char*) malloc(28);
if(buf_229) { buffers_.push_back(buf_229); std::memcpy(buf_229, "\x2f\x74\x65\x73\x74\x73\x75\x69\x74\x65\x2d\x33\x31\x34\x33\x34\x2d\x39\x38\x38\x33\x32\x37\x35\x38\x37\x00", 27); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node224 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(0, buf_229);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int, int>> node225 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int, int>>(524289, 1929715546, 1, 1974);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node226 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(-0.792054511984896, -0.792054511984896, 7.67640268511754);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node227 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-3.6893488147419103e+19, 0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node228 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.0, 0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node229 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(0.0, 2.0, 0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int>> node230 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int>>(2050, 6, 3);
char* buf_230 = (char*) malloc(1);
if(buf_230) { buffers_.push_back(buf_230); std::memcpy(buf_230, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int, int>> node231 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int, int>>(-1, buf_230, 6, 1);
char* buf_231 = (char*) malloc(1);
if(buf_231) { buffers_.push_back(buf_231); std::memcpy(buf_231, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_232 = (char*) malloc(28);
if(buf_232) { buffers_.push_back(buf_232); std::memcpy(buf_232, "\x2f\x74\x65\x73\x74\x73\x75\x69\x74\x65\x2d\x33\x31\x34\x33\x34\x2d\x39\x38\x38\x33\x32\x37\x35\x38\x37\x00", 27); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int>> node232 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int>>(buf_231, buf_232, 0);
char* buf_233 = (char*) malloc(1);
if(buf_233) { buffers_.push_back(buf_233); std::memcpy(buf_233, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_234 = (char*) malloc(6);
if(buf_234) { buffers_.push_back(buf_234); std::memcpy(buf_234, "\x77\x3a\x74\x3a\x00", 5); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, char*>> node233 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, char*>>(-1, 4, buf_233, buf_234);
char* buf_235 = (char*) malloc(1);
if(buf_235) { buffers_.push_back(buf_235); std::memcpy(buf_235, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_236 = (char*) malloc(15);
if(buf_236) { buffers_.push_back(buf_236); std::memcpy(buf_236, "\x68\x65\x6c\x6c\x6f\x2c\x20\x77\x6f\x72\x6c\x64\x0a\x00", 14); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node234 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(13, buf_235, buf_236);
char* buf_237 = (char*) malloc(22);
if(buf_237) { buffers_.push_back(buf_237); std::memcpy(buf_237, "\x2d\x39\x32\x32\x33\x33\x37\x32\x30\x33\x36\x38\x35\x34\x37\x37\x35\x38\x30\x38\x00", 21); } else { throw std::runtime_error("malloc failed"); }
char* buf_238 = (char*) malloc(1);
if(buf_238) { buffers_.push_back(buf_238); std::memcpy(buf_238, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node235 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(0, buf_237, buf_238, 0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node236 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(0, 6);
char* buf_239 = (char*) malloc(2);
if(buf_239) { buffers_.push_back(buf_239); std::memcpy(buf_239, "(nil)", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_240 = (char*) malloc(2);
if(buf_240) { buffers_.push_back(buf_240); std::memcpy(buf_240, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int>> node237 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int>>(buf_239, buf_240, 0);
char* buf_241 = (char*) malloc(3);
if(buf_241) { buffers_.push_back(buf_241); std::memcpy(buf_241, "\x02\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, int, int, int>> node238 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, int, int, int>>(20, 819212, buf_241, 20, 0, 2048);
char* buf_242 = (char*) malloc(1);
if(buf_242) { buffers_.push_back(buf_242); std::memcpy(buf_242, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*>> node239 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*>>(120, 120, buf_242);
char* buf_243 = (char*) malloc(5);
if(buf_243) { buffers_.push_back(buf_243); std::memcpy(buf_243, "\x31\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_244 = (char*) malloc(5);
if(buf_244) { buffers_.push_back(buf_244); std::memcpy(buf_244, "\x31\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node240 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(1, buf_243, buf_244);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node241 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.6354006111644578, 0.5617597462207241);
char* buf_245 = (char*) malloc(2);
if(buf_245) { buffers_.push_back(buf_245); std::memcpy(buf_245, "(nil)", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_246 = (char*) malloc(5);
if(buf_246) { buffers_.push_back(buf_246); std::memcpy(buf_246, "\x70\x51\x60\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_247 = (char*) malloc(1);
if(buf_247) { buffers_.push_back(buf_247); std::memcpy(buf_247, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*>> node242 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*>>(buf_245, buf_246, buf_247);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node243 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.5951276104207404, 0.6619858980995045);
char* buf_248 = (char*) malloc(1);
if(buf_248) { buffers_.push_back(buf_248); std::memcpy(buf_248, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*>> node244 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*>>(0, 2, buf_248);
char* buf_249 = (char*) malloc(5);
if(buf_249) { buffers_.push_back(buf_249); std::memcpy(buf_249, "\x00\x00\x00\xc1", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, char*>> node245 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, char*>>(0.0, -0.0, buf_249);
char* buf_250 = (char*) malloc(9);
if(buf_250) { buffers_.push_back(buf_250); std::memcpy(buf_250, "\x61\x00\x73\x72\x63\x2f\x66\x75", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_251 = (char*) malloc(3);
if(buf_251) { buffers_.push_back(buf_251); std::memcpy(buf_251, "\x61\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_252 = (char*) malloc(2);
if(buf_252) { buffers_.push_back(buf_252); std::memcpy(buf_252, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_253 = (char*) malloc(9);
if(buf_253) { buffers_.push_back(buf_253); std::memcpy(buf_253, "\x0a\x00\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_254 = (char*) malloc(1);
if(buf_254) { buffers_.push_back(buf_254); std::memcpy(buf_254, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*, char*, int, char*>> node246 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*, char*, int, char*>>(buf_250, buf_251, buf_252, buf_253, 80, buf_254);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node247 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(1.0, 1.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node248 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(0, 3072);
char* buf_255 = (char*) malloc(1);
if(buf_255) { buffers_.push_back(buf_255); std::memcpy(buf_255, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int>> node249 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int>>(0, buf_255, 1);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int>> node250 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int>>(0, 5, 1);
char* buf_256 = (char*) malloc(1);
if(buf_256) { buffers_.push_back(buf_256); std::memcpy(buf_256, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int, int>> node251 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int, int>>(0, buf_256, 6, 1);
char* buf_257 = (char*) malloc(9);
if(buf_257) { buffers_.push_back(buf_257); std::memcpy(buf_257, "\x2f\x62\x69\x6e\x2f\x73\x68\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_258 = (char*) malloc(9);
if(buf_258) { buffers_.push_back(buf_258); std::memcpy(buf_258, "\x2f\x62\x69\x6e\x2f\x73\x68\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_259 = (char*) malloc(4);
if(buf_259) { buffers_.push_back(buf_259); std::memcpy(buf_259, "\x2d\x63\x00", 3); } else { throw std::runtime_error("malloc failed"); }
char* buf_260 = (char*) malloc(8);
if(buf_260) { buffers_.push_back(buf_260); std::memcpy(buf_260, "\x65\x78\x69\x74\x20\x30\x00", 7); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, char*, int>> node252 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, char*, int>>(32081, buf_257, buf_258, buf_259, buf_260, 0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node253 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(3.6893488147419103e+19, 3.6893488147419103e+19);
char* buf_261 = (char*) malloc(1);
if(buf_261) { buffers_.push_back(buf_261); std::memcpy(buf_261, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node254 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(130, buf_261);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int>> node255 = std::make_shared<fbf::FunctionIdentifierInternalNode<int>>(34);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int>> node256 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int>>(-1, 0, 0);
char* buf_262 = (char*) malloc(1);
if(buf_262) { buffers_.push_back(buf_262); std::memcpy(buf_262, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node257 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(51, buf_262);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node258 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.0, -3.6893488147419103e+19);
char* buf_263 = (char*) malloc(1);
if(buf_263) { buffers_.push_back(buf_263); std::memcpy(buf_263, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int, char*>> node259 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int, char*>>(0, 122814490, 0, buf_263);
char* buf_264 = (char*) malloc(1);
if(buf_264) { buffers_.push_back(buf_264); std::memcpy(buf_264, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_265 = (char*) malloc(8);
if(buf_265) { buffers_.push_back(buf_265); std::memcpy(buf_265, "\xa0\x3b\xf5\x66\xfd\x7f\x00", 7); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, char*, int>> node260 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, char*, int>>(8, 0, buf_264, buf_265, 200);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node261 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(2.2264658498795615, 9.267056966972586);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node262 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(32080, 1);
char* buf_266 = (char*) malloc(3);
if(buf_266) { buffers_.push_back(buf_266); std::memcpy(buf_266, "\x00\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int>> node263 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int>>(0, buf_266, 0);
char* buf_267 = (char*) malloc(33);
if(buf_267) { buffers_.push_back(buf_267); std::memcpy(buf_267, "\x00\x00\x00\x00\x61\x00\x00\x00\x18\xd0\x6b\x00\x00\x00\x00\x00\xb0\x7b\x40\x00\x00\x00\x00\x00\x59\x74\x40\x00\x00\x00\x00\x00", 32); } else { throw std::runtime_error("malloc failed"); }
char* buf_268 = (char*) malloc(5);
if(buf_268) { buffers_.push_back(buf_268); std::memcpy(buf_268, "\x61\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_269 = (char*) malloc(5);
if(buf_269) { buffers_.push_back(buf_269); std::memcpy(buf_269, "\x00\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*, int>> node264 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*, int>>(buf_267, buf_268, buf_269, 1);
char* buf_270 = (char*) malloc(5);
if(buf_270) { buffers_.push_back(buf_270); std::memcpy(buf_270, "\x70\x92\x40\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_271 = (char*) malloc(6);
if(buf_271) { buffers_.push_back(buf_271); std::memcpy(buf_271, "\x65\x63\x68\x6f\x00", 5); } else { throw std::runtime_error("malloc failed"); }
char* buf_272 = (char*) malloc(1);
if(buf_272) { buffers_.push_back(buf_272); std::memcpy(buf_272, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_273 = (char*) malloc(1);
if(buf_273) { buffers_.push_back(buf_273); std::memcpy(buf_273, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_274 = (char*) malloc(1);
if(buf_274) { buffers_.push_back(buf_274); std::memcpy(buf_274, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_275 = (char*) malloc(1);
if(buf_275) { buffers_.push_back(buf_275); std::memcpy(buf_275, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, char*, char*, char*>> node265 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, char*, char*, char*>>(0, buf_270, buf_271, buf_272, buf_273, buf_274, buf_275);
char* buf_276 = (char*) malloc(1);
if(buf_276) { buffers_.push_back(buf_276); std::memcpy(buf_276, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int>> node266 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int>>(0, buf_276, 17);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node267 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.0, 0.0);
char* buf_277 = (char*) malloc(3);
if(buf_277) { buffers_.push_back(buf_277); std::memcpy(buf_277, "\x00\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int>> node268 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int>>(0, buf_277, 1234567);
char* buf_278 = (char*) malloc(1);
if(buf_278) { buffers_.push_back(buf_278); std::memcpy(buf_278, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_279 = (char*) malloc(5);
if(buf_279) { buffers_.push_back(buf_279); std::memcpy(buf_279, "\x25\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_280 = (char*) malloc(9);
if(buf_280) { buffers_.push_back(buf_280); std::memcpy(buf_280, "\x00\x00\x00\x00\x00\x00\xf0\x3f", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_281 = (char*) malloc(5);
if(buf_281) { buffers_.push_back(buf_281); std::memcpy(buf_281, "\x04\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_282 = (char*) malloc(9);
if(buf_282) { buffers_.push_back(buf_282); std::memcpy(buf_282, "\x5b\x61\x62\x63\x31\x32\x33\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_283 = (char*) malloc(5);
if(buf_283) { buffers_.push_back(buf_283); std::memcpy(buf_283, "\x0c\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, char*, char*, char*>> node269 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, char*, char*, char*>>(3, buf_278, buf_279, buf_280, buf_281, buf_282, buf_283);
char* buf_284 = (char*) malloc(2);
if(buf_284) { buffers_.push_back(buf_284); std::memcpy(buf_284, "(nil)", 1); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*>> node270 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*>>(buf_284);
char* buf_285 = (char*) malloc(9);
if(buf_285) { buffers_.push_back(buf_285); std::memcpy(buf_285, "\x43\x00\x41\x56\x58\x5f\x46\x61", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_286 = (char*) malloc(3);
if(buf_286) { buffers_.push_back(buf_286); std::memcpy(buf_286, "\x43\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int, char*>> node271 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int, char*>>(buf_285, 0, buf_286);
char* buf_287 = (char*) malloc(1);
if(buf_287) { buffers_.push_back(buf_287); std::memcpy(buf_287, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node272 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(16, buf_287);
char* buf_288 = (char*) malloc(1);
if(buf_288) { buffers_.push_back(buf_288); std::memcpy(buf_288, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int>> node273 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int>>(1, buf_288, 33);
char* buf_289 = (char*) malloc(1);
if(buf_289) { buffers_.push_back(buf_289); std::memcpy(buf_289, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_290 = (char*) malloc(1);
if(buf_290) { buffers_.push_back(buf_290); std::memcpy(buf_290, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node274 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(-1, buf_289, buf_290);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node275 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(0, 61);
char* buf_291 = (char*) malloc(9);
if(buf_291) { buffers_.push_back(buf_291); std::memcpy(buf_291, "\xd8\x7f\x00\x00\x01\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int>> node276 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int>>(buf_291, 1);
char* buf_292 = (char*) malloc(5);
if(buf_292) { buffers_.push_back(buf_292); std::memcpy(buf_292, "\x61\x62\x63\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_293 = (char*) malloc(129);
if(buf_293) { buffers_.push_back(buf_293); std::memcpy(buf_293, "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x00", 128); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node277 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(0, buf_292, buf_293);
char* buf_294 = (char*) malloc(1);
if(buf_294) { buffers_.push_back(buf_294); std::memcpy(buf_294, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node278 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(5, buf_294);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int>> node279 = std::make_shared<fbf::FunctionIdentifierInternalNode<int>>(1331);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, int, double>> node280 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, int, double>>(-18.575637941602285, 3, 0.6619858980995045);
char* buf_295 = (char*) malloc(1);
if(buf_295) { buffers_.push_back(buf_295); std::memcpy(buf_295, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int>> node281 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int>>(22, buf_295, 3);
char* buf_296 = (char*) malloc(2);
if(buf_296) { buffers_.push_back(buf_296); std::memcpy(buf_296, "\x01", 1); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node282 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(0, buf_296);
char* buf_297 = (char*) malloc(5);
if(buf_297) { buffers_.push_back(buf_297); std::memcpy(buf_297, "\x02\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_298 = (char*) malloc(1);
if(buf_298) { buffers_.push_back(buf_298); std::memcpy(buf_298, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node283 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(0, buf_297, buf_298);
char* buf_299 = (char*) malloc(1);
if(buf_299) { buffers_.push_back(buf_299); std::memcpy(buf_299, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_300 = (char*) malloc(2);
if(buf_300) { buffers_.push_back(buf_300); std::memcpy(buf_300, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int, int>> node284 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int, int>>(0, buf_299, buf_300, 0, 1012);
char* buf_301 = (char*) malloc(1);
if(buf_301) { buffers_.push_back(buf_301); std::memcpy(buf_301, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*>> node285 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*>>(101, 101, buf_301);
char* buf_302 = (char*) malloc(3);
if(buf_302) { buffers_.push_back(buf_302); std::memcpy(buf_302, "\x2e\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_303 = (char*) malloc(1);
if(buf_303) { buffers_.push_back(buf_303); std::memcpy(buf_303, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node286 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(0, buf_302, buf_303);
char* buf_304 = (char*) malloc(1);
if(buf_304) { buffers_.push_back(buf_304); std::memcpy(buf_304, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_305 = (char*) malloc(1);
if(buf_305) { buffers_.push_back(buf_305); std::memcpy(buf_305, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node287 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(130, buf_304, buf_305);
char* buf_306 = (char*) malloc(2);
if(buf_306) { buffers_.push_back(buf_306); std::memcpy(buf_306, "(nil)", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_307 = (char*) malloc(1);
if(buf_307) { buffers_.push_back(buf_307); std::memcpy(buf_307, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*>> node288 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*>>(buf_306, buf_307);
char* buf_308 = (char*) malloc(1);
if(buf_308) { buffers_.push_back(buf_308); std::memcpy(buf_308, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_309 = (char*) malloc(7);
if(buf_309) { buffers_.push_back(buf_309); std::memcpy(buf_309, "\x28\x61\x29\x5c\x31\x00", 6); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node289 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(0, buf_308, buf_309, 1);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node290 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(16777343, 2130706433);
char* buf_310 = (char*) malloc(1);
if(buf_310) { buffers_.push_back(buf_310); std::memcpy(buf_310, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int>> node291 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int>>(0, buf_310, 5);
char* buf_311 = (char*) malloc(9);
if(buf_311) { buffers_.push_back(buf_311); std::memcpy(buf_311, "\x55\x54\x46\x2d\x38\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int>> node292 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int>>(buf_311, 14);
char* buf_312 = (char*) malloc(3);
if(buf_312) { buffers_.push_back(buf_312); std::memcpy(buf_312, "\x2f\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_313 = (char*) malloc(1);
if(buf_313) { buffers_.push_back(buf_313); std::memcpy(buf_313, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node293 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(0, buf_312, buf_313);
char* buf_314 = (char*) malloc(33);
if(buf_314) { buffers_.push_back(buf_314); std::memcpy(buf_314, "\x78\x00\x00\x00\x78\x00\x00\x00\x78\x00\x00\x00\x78\x00\x00\x00\x78\x00\x00\x00\x78\x00\x00\x00\x78\x00\x00\x00\x78\x00\x00\x00", 32); } else { throw std::runtime_error("malloc failed"); }
char* buf_315 = (char*) malloc(5);
if(buf_315) { buffers_.push_back(buf_315); std::memcpy(buf_315, "\xc0\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_316 = (char*) malloc(5);
if(buf_316) { buffers_.push_back(buf_316); std::memcpy(buf_316, "\x78\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*>> node294 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*>>(buf_314, buf_315, buf_316);
char* buf_317 = (char*) malloc(5);
if(buf_317) { buffers_.push_back(buf_317); std::memcpy(buf_317, "\x00\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*>> node295 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*>>(0, 1, buf_317);
char* buf_318 = (char*) malloc(3);
if(buf_318) { buffers_.push_back(buf_318); std::memcpy(buf_318, "\x2e\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int>> node296 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int>>(1929715546, buf_318, 115);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node297 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(2.148716398059751, 4.345239849338305);
char* buf_319 = (char*) malloc(9);
if(buf_319) { buffers_.push_back(buf_319); std::memcpy(buf_319, "\x00\x00\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_320 = (char*) malloc(19);
if(buf_320) { buffers_.push_back(buf_320); std::memcpy(buf_320, "\x2f\x64\x65\x76\x2f\x6e\x75\x6c\x6c\x2f\x66\x6f\x6f\x58\x58\x58\x58\x00", 18); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*>> node298 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*>>(buf_319, buf_320);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node299 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(0, 1947653888);
char* buf_321 = (char*) malloc(5);
if(buf_321) { buffers_.push_back(buf_321); std::memcpy(buf_321, "\x2f\x68\x6f\x6d", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node300 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(0, buf_321);
char* buf_322 = (char*) malloc(1);
if(buf_322) { buffers_.push_back(buf_322); std::memcpy(buf_322, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_323 = (char*) malloc(3);
if(buf_323) { buffers_.push_back(buf_323); std::memcpy(buf_323, "\x61\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int, char*>> node301 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int, char*>>(buf_322, 5, buf_323);
char* buf_324 = (char*) malloc(2);
if(buf_324) { buffers_.push_back(buf_324); std::memcpy(buf_324, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_325 = (char*) malloc(1);
if(buf_325) { buffers_.push_back(buf_325); std::memcpy(buf_325, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_326 = (char*) malloc(5);
if(buf_326) { buffers_.push_back(buf_326); std::memcpy(buf_326, "\x10\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, int, int, char*, char*>> node302 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, int, int, char*, char*>>(1, 5, buf_324, 100, 0, buf_325, buf_326);
char* buf_327 = (char*) malloc(3);
if(buf_327) { buffers_.push_back(buf_327); std::memcpy(buf_327, "\x02\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node303 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(0, buf_327);
char* buf_328 = (char*) malloc(1);
if(buf_328) { buffers_.push_back(buf_328); std::memcpy(buf_328, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node304 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(48, buf_328);
char* buf_329 = (char*) malloc(1);
if(buf_329) { buffers_.push_back(buf_329); std::memcpy(buf_329, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node305 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(1, buf_329);
char* buf_330 = (char*) malloc(9);
if(buf_330) { buffers_.push_back(buf_330); std::memcpy(buf_330, "\x26\x00\x00\x00\x79\x1a\xdb\xf4", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_331 = (char*) malloc(8);
if(buf_331) { buffers_.push_back(buf_331); std::memcpy(buf_331, "\xe8\x60\x1f\x35\x39\x7f\x00", 7); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int, char*, int>> node306 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int, char*, int>>(buf_330, 1, buf_331, 128);
char* buf_332 = (char*) malloc(9);
if(buf_332) { buffers_.push_back(buf_332); std::memcpy(buf_332, "\x41\x3d\x33\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_333 = (char*) malloc(5);
if(buf_333) { buffers_.push_back(buf_333); std::memcpy(buf_333, "\x41\x3d\x33\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*>> node307 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*>>(buf_332, buf_333);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node308 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(4096, 30);
char* buf_334 = (char*) malloc(22);
if(buf_334) { buffers_.push_back(buf_334); std::memcpy(buf_334, "\x2d\x39\x32\x32\x33\x33\x37\x32\x30\x33\x36\x38\x35\x34\x37\x37\x35\x38\x30\x39\x00", 21); } else { throw std::runtime_error("malloc failed"); }
char* buf_335 = (char*) malloc(1);
if(buf_335) { buffers_.push_back(buf_335); std::memcpy(buf_335, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node309 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(0, buf_334, buf_335, 0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node310 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-1.1583216566923926, 0.6619858980995045);
char* buf_336 = (char*) malloc(1);
if(buf_336) { buffers_.push_back(buf_336); std::memcpy(buf_336, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_337 = (char*) malloc(1);
if(buf_337) { buffers_.push_back(buf_337); std::memcpy(buf_337, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*>> node311 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*>>(buf_336, buf_337);
char* buf_338 = (char*) malloc(1);
if(buf_338) { buffers_.push_back(buf_338); std::memcpy(buf_338, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_339 = (char*) malloc(5);
if(buf_339) { buffers_.push_back(buf_339); std::memcpy(buf_339, "\x10\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, char*>> node312 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, char*>>(7, 5, buf_338, buf_339);
char* buf_340 = (char*) malloc(5);
if(buf_340) { buffers_.push_back(buf_340); std::memcpy(buf_340, "\x00\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_341 = (char*) malloc(1);
if(buf_341) { buffers_.push_back(buf_341); std::memcpy(buf_341, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node313 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(0, buf_340, buf_341);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int, int>> node314 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int, int>>(0, 5, 0, 0);
char* buf_342 = (char*) malloc(1);
if(buf_342) { buffers_.push_back(buf_342); std::memcpy(buf_342, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, int>> node315 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, int>>(-1, 6, buf_342, 16);
char* buf_343 = (char*) malloc(2);
if(buf_343) { buffers_.push_back(buf_343); std::memcpy(buf_343, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, int, int, char*, int>> node316 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, int, int, char*, int>>(0, 5, 1, 20, buf_343, 16);
char* buf_344 = (char*) malloc(6);
if(buf_344) { buffers_.push_back(buf_344); std::memcpy(buf_344, "\x54\x45\x53\x54\x00", 5); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node317 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(0, buf_344);
char* buf_345 = (char*) malloc(12);
if(buf_345) { buffers_.push_back(buf_345); std::memcpy(buf_345, "\x32\x31\x34\x37\x34\x38\x33\x36\x34\x37\x00", 11); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node318 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(2147483647, buf_345);
char* buf_346 = (char*) malloc(1);
if(buf_346) { buffers_.push_back(buf_346); std::memcpy(buf_346, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_347 = (char*) malloc(1);
if(buf_347) { buffers_.push_back(buf_347); std::memcpy(buf_347, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, char*>> node319 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, char*>>(0, 10, buf_346, buf_347);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node320 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(0, 0);
char* buf_348 = (char*) malloc(9);
if(buf_348) { buffers_.push_back(buf_348); std::memcpy(buf_348, "\x00\x00\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node321 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(1541600931, buf_348);
char* buf_349 = (char*) malloc(1);
if(buf_349) { buffers_.push_back(buf_349); std::memcpy(buf_349, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int, int>> node322 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int, int>>(0, buf_349, 0, 1);
char* buf_350 = (char*) malloc(1);
if(buf_350) { buffers_.push_back(buf_350); std::memcpy(buf_350, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_351 = (char*) malloc(1);
if(buf_351) { buffers_.push_back(buf_351); std::memcpy(buf_351, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_352 = (char*) malloc(1);
if(buf_352) { buffers_.push_back(buf_352); std::memcpy(buf_352, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*>> node323 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*>>(110, buf_350, buf_351, buf_352);
char* buf_353 = (char*) malloc(1);
if(buf_353) { buffers_.push_back(buf_353); std::memcpy(buf_353, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node324 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(0, buf_353);
char* buf_354 = (char*) malloc(2);
if(buf_354) { buffers_.push_back(buf_354); std::memcpy(buf_354, "(nil)", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_355 = (char*) malloc(5);
if(buf_355) { buffers_.push_back(buf_355); std::memcpy(buf_355, "\x61\x62\x63\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*>> node325 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*>>(buf_354, buf_355);
char* buf_356 = (char*) malloc(9);
if(buf_356) { buffers_.push_back(buf_356); std::memcpy(buf_356, "\x53\x75\x63\x63\x65\x73\x73\x00", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int>> node326 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int>>(buf_356, 0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int>> node327 = std::make_shared<fbf::FunctionIdentifierInternalNode<int>>(0);
char* buf_357 = (char*) malloc(1);
if(buf_357) { buffers_.push_back(buf_357); std::memcpy(buf_357, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*>> node328 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*>>(0, 5, buf_357);
char* buf_358 = (char*) malloc(9);
if(buf_358) { buffers_.push_back(buf_358); std::memcpy(buf_358, "\x2f\x64\x6c\x6f\x70\x65\x6e\x2e", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_359 = (char*) malloc(27);
if(buf_359) { buffers_.push_back(buf_359); std::memcpy(buf_359, "\x73\x72\x63\x2f\x66\x75\x6e\x63\x74\x69\x6f\x6e\x61\x6c\x2f\x64\x6c\x6f\x70\x65\x6e\x2e\x65\x78\x65\x00", 26); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int>> node329 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int>>(buf_358, buf_359, 47);
char* buf_360 = (char*) malloc(1);
if(buf_360) { buffers_.push_back(buf_360); std::memcpy(buf_360, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_361 = (char*) malloc(3);
if(buf_361) { buffers_.push_back(buf_361); std::memcpy(buf_361, "\x43\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_362 = (char*) malloc(1);
if(buf_362) { buffers_.push_back(buf_362); std::memcpy(buf_362, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, int, char*, char*>> node330 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, int, char*, char*>>(buf_360, 8127, buf_361, buf_362);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int>> node331 = std::make_shared<fbf::FunctionIdentifierInternalNode<int>>(1000);
char* buf_363 = (char*) malloc(18);
if(buf_363) { buffers_.push_back(buf_363); std::memcpy(buf_363, "\x6e\x6f\x6e\x73\x65\x6e\x73\x69\x63\x61\x6c\x5f\x75\x73\x65\x72\x00", 17); } else { throw std::runtime_error("malloc failed"); }
char* buf_364 = (char*) malloc(1);
if(buf_364) { buffers_.push_back(buf_364); std::memcpy(buf_364, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_365 = (char*) malloc(8);
if(buf_365) { buffers_.push_back(buf_365); std::memcpy(buf_365, "\xbe\x12\x5e\x29\xb2\x7f\x00", 7); } else { throw std::runtime_error("malloc failed"); }
char* buf_366 = (char*) malloc(1);
if(buf_366) { buffers_.push_back(buf_366); std::memcpy(buf_366, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, int, char*>> node332 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*, int, char*>>(0, buf_363, buf_364, buf_365, 1024, buf_366);
char* buf_367 = (char*) malloc(1);
if(buf_367) { buffers_.push_back(buf_367); std::memcpy(buf_367, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int, int>> node333 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int, int>>(0, buf_367, 0, 0);
char* buf_368 = (char*) malloc(1);
if(buf_368) { buffers_.push_back(buf_368); std::memcpy(buf_368, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*>> node334 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*>>(0, 0, buf_368);
char* buf_369 = (char*) malloc(2);
if(buf_369) { buffers_.push_back(buf_369); std::memcpy(buf_369, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, int>> node335 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, int>>(6, 5, buf_369, 10);
char* buf_370 = (char*) malloc(1);
if(buf_370) { buffers_.push_back(buf_370); std::memcpy(buf_370, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*>> node336 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*>>(buf_370);
char* buf_371 = (char*) malloc(1);
if(buf_371) { buffers_.push_back(buf_371); std::memcpy(buf_371, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_372 = (char*) malloc(1);
if(buf_372) { buffers_.push_back(buf_372); std::memcpy(buf_372, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_373 = (char*) malloc(1);
if(buf_373) { buffers_.push_back(buf_373); std::memcpy(buf_373, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*>> node337 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*>>(0, buf_371, buf_372, buf_373);
char* buf_374 = (char*) malloc(1);
if(buf_374) { buffers_.push_back(buf_374); std::memcpy(buf_374, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*, int>> node338 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*, int>>(0, 5, buf_374, 16);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node339 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(0, -1);
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_mutex_init_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_mutex_init");
std::shared_ptr<fbf::FunctionIdentifierNode> hcreate_ = std::make_shared<fbf::FunctionIdentifierNode>("hcreate");
std::shared_ptr<fbf::FunctionIdentifierNode> bind_ = std::make_shared<fbf::FunctionIdentifierNode>("bind");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_atfork_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_atfork");
std::shared_ptr<fbf::FunctionIdentifierNode> tmpfile64_ = std::make_shared<fbf::FunctionIdentifierNode>("tmpfile64");
std::shared_ptr<fbf::FunctionIdentifierNode> read_ = std::make_shared<fbf::FunctionIdentifierNode>("read");
char* buf_375 = (char*) malloc(1);
if(buf_375) { buffers_.push_back(buf_375); std::memcpy(buf_375, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_376 = (char*) malloc(1);
if(buf_376) { buffers_.push_back(buf_376); std::memcpy(buf_376, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node346 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(0, buf_375, buf_376);
std::shared_ptr<fbf::FunctionIdentifierNode> fputc_ = std::make_shared<fbf::FunctionIdentifierNode>("fputc");
std::shared_ptr<fbf::FunctionIdentifierNode> clock_gettime_ = std::make_shared<fbf::FunctionIdentifierNode>("clock_gettime");
std::shared_ptr<fbf::FunctionIdentifierNode> fseeko64_ = std::make_shared<fbf::FunctionIdentifierNode>("fseeko64");
std::shared_ptr<fbf::FunctionIdentifierNode> getpwnam_r_ = std::make_shared<fbf::FunctionIdentifierNode>("getpwnam_r");
std::shared_ptr<fbf::FunctionIdentifierNode> geteuid_ = std::make_shared<fbf::FunctionIdentifierNode>("geteuid");
std::shared_ptr<fbf::FunctionIdentifierNode> newlocale_ = std::make_shared<fbf::FunctionIdentifierNode>("newlocale");
std::shared_ptr<fbf::FunctionIdentifierNode> strrchr_ = std::make_shared<fbf::FunctionIdentifierNode>("strrchr");
std::shared_ptr<fbf::FunctionIdentifierNode> fstat64_ = std::make_shared<fbf::FunctionIdentifierNode>("fstat64");
std::shared_ptr<fbf::FunctionIdentifierNode> clearenv_ = std::make_shared<fbf::FunctionIdentifierNode>("clearenv");
std::shared_ptr<fbf::FunctionIdentifierNode> strerror_ = std::make_shared<fbf::FunctionIdentifierNode>("strerror");
std::shared_ptr<fbf::FunctionIdentifierNode> free_ = std::make_shared<fbf::FunctionIdentifierNode>("free");
char* buf_377 = (char*) malloc(1);
if(buf_377) { buffers_.push_back(buf_377); std::memcpy(buf_377, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node358 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(-1, buf_377);
std::shared_ptr<fbf::FunctionIdentifierNode> sigemptyset_ = std::make_shared<fbf::FunctionIdentifierNode>("sigemptyset");
std::shared_ptr<fbf::FunctionIdentifierNode> sem_trywait_ = std::make_shared<fbf::FunctionIdentifierNode>("sem_trywait");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_cond_timedwait_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_cond_timedwait");
std::shared_ptr<fbf::FunctionIdentifierNode> sem_init_ = std::make_shared<fbf::FunctionIdentifierNode>("sem_init");
std::shared_ptr<fbf::FunctionIdentifierNode> time_ = std::make_shared<fbf::FunctionIdentifierNode>("time");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node364 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(0, 1);
std::shared_ptr<fbf::FunctionIdentifierNode> iswspace_ = std::make_shared<fbf::FunctionIdentifierNode>("iswspace");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_key_delete_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_key_delete");
std::shared_ptr<fbf::FunctionIdentifierNode> sigaction_ = std::make_shared<fbf::FunctionIdentifierNode>("sigaction");
std::shared_ptr<fbf::FunctionIdentifierNode> atol_ = std::make_shared<fbf::FunctionIdentifierNode>("atol");
std::shared_ptr<fbf::FunctionIdentifierNode> unsetenv_ = std::make_shared<fbf::FunctionIdentifierNode>("unsetenv");
std::shared_ptr<fbf::FunctionIdentifierNode> setsockopt_ = std::make_shared<fbf::FunctionIdentifierNode>("setsockopt");
std::shared_ptr<fbf::FunctionIdentifierNode> connect_ = std::make_shared<fbf::FunctionIdentifierNode>("connect");
std::shared_ptr<fbf::FunctionIdentifierNode> lseek64_ = std::make_shared<fbf::FunctionIdentifierNode>("lseek64");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_key_create_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_key_create");
std::shared_ptr<fbf::FunctionIdentifierNode> accept_ = std::make_shared<fbf::FunctionIdentifierNode>("accept");
std::shared_ptr<fbf::FunctionIdentifierNode> uselocale_ = std::make_shared<fbf::FunctionIdentifierNode>("uselocale");
std::shared_ptr<fbf::FunctionIdentifierNode> y1_ = std::make_shared<fbf::FunctionIdentifierNode>("y1");
std::shared_ptr<fbf::FunctionIdentifierNode> strtoll_ = std::make_shared<fbf::FunctionIdentifierNode>("strtoll");
std::shared_ptr<fbf::FunctionIdentifierNode> sysconf_ = std::make_shared<fbf::FunctionIdentifierNode>("sysconf");
std::shared_ptr<fbf::FunctionIdentifierNode> strdup_ = std::make_shared<fbf::FunctionIdentifierNode>("strdup");
std::shared_ptr<fbf::FunctionIdentifierNode> initstate_ = std::make_shared<fbf::FunctionIdentifierNode>("initstate");
char* buf_378 = (char*) malloc(8);
if(buf_378) { buffers_.push_back(buf_378); std::memcpy(buf_378, "\x40\x4c\x64\x1c\xff\x7f\x00", 7); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node381 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(0, buf_378);
std::shared_ptr<fbf::FunctionIdentifierNode> feof_ = std::make_shared<fbf::FunctionIdentifierNode>("feof");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_mutex_unlock_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_mutex_unlock");
std::shared_ptr<fbf::FunctionIdentifierNode> fgetwc_ = std::make_shared<fbf::FunctionIdentifierNode>("fgetwc");
std::shared_ptr<fbf::FunctionIdentifierNode> iconv_close_ = std::make_shared<fbf::FunctionIdentifierNode>("iconv_close");
std::shared_ptr<fbf::FunctionIdentifierNode> recvfrom_ = std::make_shared<fbf::FunctionIdentifierNode>("recvfrom");
std::shared_ptr<fbf::FunctionIdentifierNode> fdopen_ = std::make_shared<fbf::FunctionIdentifierNode>("fdopen");
std::shared_ptr<fbf::FunctionIdentifierNode> pipe_ = std::make_shared<fbf::FunctionIdentifierNode>("pipe");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_detach_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_detach");
std::shared_ptr<fbf::FunctionIdentifierNode> mkdtemp_ = std::make_shared<fbf::FunctionIdentifierNode>("mkdtemp");
std::shared_ptr<fbf::FunctionIdentifierNode> acoshl_ = std::make_shared<fbf::FunctionIdentifierNode>("acoshl");
std::shared_ptr<fbf::FunctionIdentifierNode> ftok_ = std::make_shared<fbf::FunctionIdentifierNode>("ftok");
char* buf_379 = (char*) malloc(5);
if(buf_379) { buffers_.push_back(buf_379); std::memcpy(buf_379, "\x00\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int, char*>> node393 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int, char*>>(0, 0, buf_379);
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_setcanceltype_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_setcanceltype");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_setcancelstate_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_setcancelstate");
std::shared_ptr<fbf::FunctionIdentifierNode> wcscpy_ = std::make_shared<fbf::FunctionIdentifierNode>("wcscpy");
std::shared_ptr<fbf::FunctionIdentifierNode> statvfs64_ = std::make_shared<fbf::FunctionIdentifierNode>("statvfs64");
std::shared_ptr<fbf::FunctionIdentifierNode> nl_langinfo_ = std::make_shared<fbf::FunctionIdentifierNode>("nl_langinfo");
std::shared_ptr<fbf::FunctionIdentifierNode> posix_spawn_file_actions_addclose_ = std::make_shared<fbf::FunctionIdentifierNode>("posix_spawn_file_actions_addclose");
std::shared_ptr<fbf::FunctionIdentifierNode> htonl_ = std::make_shared<fbf::FunctionIdentifierNode>("htonl");
std::shared_ptr<fbf::FunctionIdentifierNode> regcomp_ = std::make_shared<fbf::FunctionIdentifierNode>("regcomp");
char* buf_380 = (char*) malloc(1);
if(buf_380) { buffers_.push_back(buf_380); std::memcpy(buf_380, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node402 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(0, buf_380);
std::shared_ptr<fbf::FunctionIdentifierNode> rewind_ = std::make_shared<fbf::FunctionIdentifierNode>("rewind");
std::shared_ptr<fbf::FunctionIdentifierNode> sem_wait_ = std::make_shared<fbf::FunctionIdentifierNode>("sem_wait");
char* buf_381 = (char*) malloc(1);
if(buf_381) { buffers_.push_back(buf_381); std::memcpy(buf_381, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_382 = (char*) malloc(1);
if(buf_382) { buffers_.push_back(buf_382); std::memcpy(buf_382, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node405 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(0, buf_381, buf_382);
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_mutex_timedlock_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_mutex_timedlock");
std::shared_ptr<fbf::FunctionIdentifierNode> nanosleep_ = std::make_shared<fbf::FunctionIdentifierNode>("nanosleep");
std::shared_ptr<fbf::FunctionIdentifierNode> stat64_ = std::make_shared<fbf::FunctionIdentifierNode>("stat64");
std::shared_ptr<fbf::FunctionIdentifierNode> _IO_putc_ = std::make_shared<fbf::FunctionIdentifierNode>("_IO_putc");
std::shared_ptr<fbf::FunctionIdentifierNode> setvbuf_ = std::make_shared<fbf::FunctionIdentifierNode>("setvbuf");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_once_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_once");
std::shared_ptr<fbf::FunctionIdentifierNode> sem_post_ = std::make_shared<fbf::FunctionIdentifierNode>("sem_post");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_condattr_setclock_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_condattr_setclock");
std::shared_ptr<fbf::FunctionIdentifierNode> yn_ = std::make_shared<fbf::FunctionIdentifierNode>("yn");
std::shared_ptr<fbf::FunctionIdentifierNode> getppid_ = std::make_shared<fbf::FunctionIdentifierNode>("getppid");
std::shared_ptr<fbf::FunctionIdentifierNode> fileno_ = std::make_shared<fbf::FunctionIdentifierNode>("fileno");
std::shared_ptr<fbf::FunctionIdentifierNode> strcspn_ = std::make_shared<fbf::FunctionIdentifierNode>("strcspn");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_getspecific_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_getspecific");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, int>> node419 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, int>>(0, 8);
std::shared_ptr<fbf::FunctionIdentifierNode> feclearexcept_ = std::make_shared<fbf::FunctionIdentifierNode>("feclearexcept");
std::shared_ptr<fbf::FunctionIdentifierNode> feraiseexcept_ = std::make_shared<fbf::FunctionIdentifierNode>("feraiseexcept");
std::shared_ptr<fbf::FunctionIdentifierNode> sem_timedwait_ = std::make_shared<fbf::FunctionIdentifierNode>("sem_timedwait");
std::shared_ptr<fbf::FunctionIdentifierNode> sigismember_ = std::make_shared<fbf::FunctionIdentifierNode>("sigismember");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_rwlock_trywrlock_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_rwlock_trywrlock");
std::shared_ptr<fbf::FunctionIdentifierNode> setlocale_ = std::make_shared<fbf::FunctionIdentifierNode>("setlocale");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int>> node426 = std::make_shared<fbf::FunctionIdentifierInternalNode<int>>(0);
std::shared_ptr<fbf::FunctionIdentifierNode> tzset_ = std::make_shared<fbf::FunctionIdentifierNode>("tzset");
std::shared_ptr<fbf::FunctionIdentifierNode> f_ = std::make_shared<fbf::FunctionIdentifierNode>("f");
std::shared_ptr<fbf::FunctionIdentifierNode> __isoc99_fwscanf_ = std::make_shared<fbf::FunctionIdentifierNode>("__isoc99_fwscanf");
std::shared_ptr<fbf::FunctionIdentifierNode> fesetexceptflag_ = std::make_shared<fbf::FunctionIdentifierNode>("fesetexceptflag");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node431 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(2.0, -0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node432 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.0, 2.0);
std::shared_ptr<fbf::FunctionIdentifierNode> y0f_ = std::make_shared<fbf::FunctionIdentifierNode>("y0f");
std::shared_ptr<fbf::FunctionIdentifierNode> logbf_ = std::make_shared<fbf::FunctionIdentifierNode>("logbf");
std::shared_ptr<fbf::FunctionIdentifierNode> acoshf_ = std::make_shared<fbf::FunctionIdentifierNode>("acoshf");
std::shared_ptr<fbf::FunctionIdentifierNode> sigaddset_ = std::make_shared<fbf::FunctionIdentifierNode>("sigaddset");
std::shared_ptr<fbf::FunctionIdentifierNode> posix_spawnp_ = std::make_shared<fbf::FunctionIdentifierNode>("posix_spawnp");
std::shared_ptr<fbf::FunctionIdentifierNode> wcsncpy_ = std::make_shared<fbf::FunctionIdentifierNode>("wcsncpy");
std::shared_ptr<fbf::FunctionIdentifierNode> fegetexceptflag_ = std::make_shared<fbf::FunctionIdentifierNode>("fegetexceptflag");
std::shared_ptr<fbf::FunctionIdentifierNode> _exit_ = std::make_shared<fbf::FunctionIdentifierNode>("_exit");
std::shared_ptr<fbf::FunctionIdentifierNode> logl_ = std::make_shared<fbf::FunctionIdentifierNode>("logl");
std::shared_ptr<fbf::FunctionIdentifierNode> regerror_ = std::make_shared<fbf::FunctionIdentifierNode>("regerror");
std::shared_ptr<fbf::FunctionIdentifierNode> shmctl_ = std::make_shared<fbf::FunctionIdentifierNode>("shmctl");
std::shared_ptr<fbf::FunctionIdentifierNode> rintf_ = std::make_shared<fbf::FunctionIdentifierNode>("rintf");
std::shared_ptr<fbf::FunctionIdentifierNode> fgetc_ = std::make_shared<fbf::FunctionIdentifierNode>("fgetc");
std::shared_ptr<fbf::FunctionIdentifierNode> daemon_ = std::make_shared<fbf::FunctionIdentifierNode>("daemon");
std::shared_ptr<fbf::FunctionIdentifierNode> __libc_current_sigrtmin_ = std::make_shared<fbf::FunctionIdentifierNode>("__libc_current_sigrtmin");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_barrier_wait_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_barrier_wait");
std::shared_ptr<fbf::FunctionIdentifierNode> fabsf_ = std::make_shared<fbf::FunctionIdentifierNode>("fabsf");
std::shared_ptr<fbf::FunctionIdentifierNode> execl_ = std::make_shared<fbf::FunctionIdentifierNode>("execl");
std::shared_ptr<fbf::FunctionIdentifierNode> posix_spawn_file_actions_adddup2_ = std::make_shared<fbf::FunctionIdentifierNode>("posix_spawn_file_actions_adddup2");
std::shared_ptr<fbf::FunctionIdentifierNode> listen_ = std::make_shared<fbf::FunctionIdentifierNode>("listen");
char* buf_383 = (char*) malloc(1);
if(buf_383) { buffers_.push_back(buf_383); std::memcpy(buf_383, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, int>> node453 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, int>>(0, buf_383, 0);
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_mutexattr_setrobust_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_mutexattr_setrobust");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_mutexattr_settype_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_mutexattr_settype");
std::shared_ptr<fbf::FunctionIdentifierNode> fesetround_ = std::make_shared<fbf::FunctionIdentifierNode>("fesetround");
std::shared_ptr<fbf::FunctionIdentifierNode> sqrtl_ = std::make_shared<fbf::FunctionIdentifierNode>("sqrtl");
std::shared_ptr<fbf::FunctionIdentifierNode> lfind_ = std::make_shared<fbf::FunctionIdentifierNode>("lfind");
std::shared_ptr<fbf::FunctionIdentifierNode> modff_ = std::make_shared<fbf::FunctionIdentifierNode>("modff");
std::shared_ptr<fbf::FunctionIdentifierNode> getrlimit64_ = std::make_shared<fbf::FunctionIdentifierNode>("getrlimit64");
std::shared_ptr<fbf::FunctionIdentifierNode> log2l_ = std::make_shared<fbf::FunctionIdentifierNode>("log2l");
std::shared_ptr<fbf::FunctionIdentifierNode> twalk_ = std::make_shared<fbf::FunctionIdentifierNode>("twalk");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node463 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.8268179645205255, -0.6787637026394024);
std::shared_ptr<fbf::FunctionIdentifierNode> atanh_ = std::make_shared<fbf::FunctionIdentifierNode>("atanh");
std::shared_ptr<fbf::FunctionIdentifierNode> atanhl_ = std::make_shared<fbf::FunctionIdentifierNode>("atanhl");
std::shared_ptr<fbf::FunctionIdentifierNode> wcscmp_ = std::make_shared<fbf::FunctionIdentifierNode>("wcscmp");
std::shared_ptr<fbf::FunctionIdentifierNode> ungetc_ = std::make_shared<fbf::FunctionIdentifierNode>("ungetc");
std::shared_ptr<fbf::FunctionIdentifierNode> msgrcv_ = std::make_shared<fbf::FunctionIdentifierNode>("msgrcv");
std::shared_ptr<fbf::FunctionIdentifierNode> insque_ = std::make_shared<fbf::FunctionIdentifierNode>("insque");
std::shared_ptr<fbf::FunctionIdentifierNode> close_ = std::make_shared<fbf::FunctionIdentifierNode>("close");
char* buf_384 = (char*) malloc(12);
if(buf_384) { buffers_.push_back(buf_384); std::memcpy(buf_384, "\x34\x32\x39\x34\x39\x36\x37\x32\x39\x35\x00", 11); } else { throw std::runtime_error("malloc failed"); }
char* buf_385 = (char*) malloc(1);
if(buf_385) { buffers_.push_back(buf_385); std::memcpy(buf_385, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node471 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(-1, buf_384, buf_385, 0);
std::shared_ptr<fbf::FunctionIdentifierNode> strtoull_ = std::make_shared<fbf::FunctionIdentifierNode>("strtoull");
std::shared_ptr<fbf::FunctionIdentifierNode> strtoul_ = std::make_shared<fbf::FunctionIdentifierNode>("strtoul");
std::shared_ptr<fbf::FunctionIdentifierNode> fprintf_ = std::make_shared<fbf::FunctionIdentifierNode>("fprintf");
std::shared_ptr<fbf::FunctionIdentifierNode> __posix_getopt_ = std::make_shared<fbf::FunctionIdentifierNode>("__posix_getopt");
std::shared_ptr<fbf::FunctionIdentifierNode> sem_open_ = std::make_shared<fbf::FunctionIdentifierNode>("sem_open");
std::shared_ptr<fbf::FunctionIdentifierNode> fseek_ = std::make_shared<fbf::FunctionIdentifierNode>("fseek");
std::shared_ptr<fbf::FunctionIdentifierNode> fcntl_ = std::make_shared<fbf::FunctionIdentifierNode>("fcntl");
std::shared_ptr<fbf::FunctionIdentifierNode> fdimf_ = std::make_shared<fbf::FunctionIdentifierNode>("fdimf");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node480 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(3.6893488147419103e+19, 3.6893488147419103e+19);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node481 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-2.0, -2.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node482 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.0, -0.0);
std::shared_ptr<fbf::FunctionIdentifierNode> j0f_ = std::make_shared<fbf::FunctionIdentifierNode>("j0f");
std::shared_ptr<fbf::FunctionIdentifierNode> erff_ = std::make_shared<fbf::FunctionIdentifierNode>("erff");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node485 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-3.6893488147419103e+19, -0.0);
std::shared_ptr<fbf::FunctionIdentifierNode> cbrtf_ = std::make_shared<fbf::FunctionIdentifierNode>("cbrtf");
std::shared_ptr<fbf::FunctionIdentifierNode> lgammaf_ = std::make_shared<fbf::FunctionIdentifierNode>("lgammaf");
std::shared_ptr<fbf::FunctionIdentifierNode> tanf_ = std::make_shared<fbf::FunctionIdentifierNode>("tanf");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node489 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(2.0, 0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node490 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.0, 2.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node491 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.0, -0.0);
std::shared_ptr<fbf::FunctionIdentifierNode> asinhf_ = std::make_shared<fbf::FunctionIdentifierNode>("asinhf");
std::shared_ptr<fbf::FunctionIdentifierNode> exp10f_ = std::make_shared<fbf::FunctionIdentifierNode>("exp10f");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node494 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(3.6893488147419103e+19, 0.0);
std::shared_ptr<fbf::FunctionIdentifierNode> erfcf_ = std::make_shared<fbf::FunctionIdentifierNode>("erfcf");
std::shared_ptr<fbf::FunctionIdentifierNode> atanhf_ = std::make_shared<fbf::FunctionIdentifierNode>("atanhf");
std::shared_ptr<fbf::FunctionIdentifierNode> expm1f_ = std::make_shared<fbf::FunctionIdentifierNode>("expm1f");
std::shared_ptr<fbf::FunctionIdentifierNode> nextafterl_ = std::make_shared<fbf::FunctionIdentifierNode>("nextafterl");
std::shared_ptr<fbf::FunctionIdentifierNode> semget_ = std::make_shared<fbf::FunctionIdentifierNode>("semget");
std::shared_ptr<fbf::FunctionIdentifierNode> sem_unlink_ = std::make_shared<fbf::FunctionIdentifierNode>("sem_unlink");
std::shared_ptr<fbf::FunctionIdentifierNode> log1pl_ = std::make_shared<fbf::FunctionIdentifierNode>("log1pl");
std::shared_ptr<fbf::FunctionIdentifierNode> jnf_ = std::make_shared<fbf::FunctionIdentifierNode>("jnf");
std::shared_ptr<fbf::FunctionIdentifierNode> msgget_ = std::make_shared<fbf::FunctionIdentifierNode>("msgget");
std::shared_ptr<fbf::FunctionIdentifierNode> open64_ = std::make_shared<fbf::FunctionIdentifierNode>("open64");
std::shared_ptr<fbf::FunctionIdentifierNode> strtold_ = std::make_shared<fbf::FunctionIdentifierNode>("strtold");
std::shared_ptr<fbf::FunctionIdentifierNode> dirname_ = std::make_shared<fbf::FunctionIdentifierNode>("dirname");
std::shared_ptr<fbf::FunctionIdentifierNode> msgsnd_ = std::make_shared<fbf::FunctionIdentifierNode>("msgsnd");
std::shared_ptr<fbf::FunctionIdentifierNode> scalb_ = std::make_shared<fbf::FunctionIdentifierNode>("scalb");
std::shared_ptr<fbf::FunctionIdentifierNode> open_memstream_ = std::make_shared<fbf::FunctionIdentifierNode>("open_memstream");
std::shared_ptr<fbf::FunctionIdentifierNode> __dn_expand_ = std::make_shared<fbf::FunctionIdentifierNode>("__dn_expand");
std::shared_ptr<fbf::FunctionIdentifierNode> remque_ = std::make_shared<fbf::FunctionIdentifierNode>("remque");
std::shared_ptr<fbf::FunctionIdentifierNode> log1pf_ = std::make_shared<fbf::FunctionIdentifierNode>("log1pf");
std::shared_ptr<fbf::FunctionIdentifierNode> y0_ = std::make_shared<fbf::FunctionIdentifierNode>("y0");
std::shared_ptr<fbf::FunctionIdentifierNode> shmdt_ = std::make_shared<fbf::FunctionIdentifierNode>("shmdt");
std::shared_ptr<fbf::FunctionIdentifierNode> popen_ = std::make_shared<fbf::FunctionIdentifierNode>("popen");
std::shared_ptr<fbf::FunctionIdentifierNode> acosl_ = std::make_shared<fbf::FunctionIdentifierNode>("acosl");
std::shared_ptr<fbf::FunctionIdentifierNode> frexp_ = std::make_shared<fbf::FunctionIdentifierNode>("frexp");
std::shared_ptr<fbf::FunctionIdentifierNode> kill_ = std::make_shared<fbf::FunctionIdentifierNode>("kill");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node519 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(2.0, -0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node520 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.0, -2.0);
std::shared_ptr<fbf::FunctionIdentifierNode> tgammaf_ = std::make_shared<fbf::FunctionIdentifierNode>("tgammaf");
std::shared_ptr<fbf::FunctionIdentifierNode> exp2f_ = std::make_shared<fbf::FunctionIdentifierNode>("exp2f");
std::shared_ptr<fbf::FunctionIdentifierNode> y1f_ = std::make_shared<fbf::FunctionIdentifierNode>("y1f");
std::shared_ptr<fbf::FunctionIdentifierNode> fmaxf_ = std::make_shared<fbf::FunctionIdentifierNode>("fmaxf");
std::shared_ptr<fbf::FunctionIdentifierNode> getpid_ = std::make_shared<fbf::FunctionIdentifierNode>("getpid");
std::shared_ptr<fbf::FunctionIdentifierNode> dlerror_ = std::make_shared<fbf::FunctionIdentifierNode>("dlerror");
std::shared_ptr<fbf::FunctionIdentifierNode> modf_ = std::make_shared<fbf::FunctionIdentifierNode>("modf");
std::shared_ptr<fbf::FunctionIdentifierNode> __sysv_signal_ = std::make_shared<fbf::FunctionIdentifierNode>("__sysv_signal");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node529 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(-3.6893488147419103e+19, -2.0, 0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node530 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(-0.0, -2.0, -0.0);
std::shared_ptr<fbf::FunctionIdentifierNode> copysignf_ = std::make_shared<fbf::FunctionIdentifierNode>("copysignf");
std::shared_ptr<fbf::FunctionIdentifierNode> fminf_ = std::make_shared<fbf::FunctionIdentifierNode>("fminf");
std::shared_ptr<fbf::FunctionIdentifierNode> powf_ = std::make_shared<fbf::FunctionIdentifierNode>("powf");
std::shared_ptr<fbf::FunctionIdentifierNode> socket_ = std::make_shared<fbf::FunctionIdentifierNode>("socket");
std::shared_ptr<fbf::FunctionIdentifierNode> getsockname_ = std::make_shared<fbf::FunctionIdentifierNode>("getsockname");
std::shared_ptr<fbf::FunctionIdentifierNode> expm1l_ = std::make_shared<fbf::FunctionIdentifierNode>("expm1l");
std::shared_ptr<fbf::FunctionIdentifierNode> dlopen_ = std::make_shared<fbf::FunctionIdentifierNode>("dlopen");
std::shared_ptr<fbf::FunctionIdentifierNode> powl_ = std::make_shared<fbf::FunctionIdentifierNode>("powl");
std::shared_ptr<fbf::FunctionIdentifierNode> nexttowardf_ = std::make_shared<fbf::FunctionIdentifierNode>("nexttowardf");
std::shared_ptr<fbf::FunctionIdentifierNode> mbsrtowcs_ = std::make_shared<fbf::FunctionIdentifierNode>("mbsrtowcs");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node541 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.6508243382819116, 0.6619858980995045);
std::shared_ptr<fbf::FunctionIdentifierNode> erf_ = std::make_shared<fbf::FunctionIdentifierNode>("erf");
std::shared_ptr<fbf::FunctionIdentifierNode> erfl_ = std::make_shared<fbf::FunctionIdentifierNode>("erfl");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, double>> node544 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, double>>(-1074, 0.0);
std::shared_ptr<fbf::FunctionIdentifierNode> ilogbl_ = std::make_shared<fbf::FunctionIdentifierNode>("ilogbl");
std::shared_ptr<fbf::FunctionIdentifierNode> ilogb_ = std::make_shared<fbf::FunctionIdentifierNode>("ilogb");
std::shared_ptr<fbf::FunctionIdentifierNode> lrand48_ = std::make_shared<fbf::FunctionIdentifierNode>("lrand48");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, double>> node548 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, double>>(123456792, 3.6893488147419103e+19);
std::shared_ptr<fbf::FunctionIdentifierNode> llrintf_ = std::make_shared<fbf::FunctionIdentifierNode>("llrintf");
std::shared_ptr<fbf::FunctionIdentifierNode> lrintf_ = std::make_shared<fbf::FunctionIdentifierNode>("lrintf");
std::shared_ptr<fbf::FunctionIdentifierNode> getenv_ = std::make_shared<fbf::FunctionIdentifierNode>("getenv");
std::shared_ptr<fbf::FunctionIdentifierNode> strtol_ = std::make_shared<fbf::FunctionIdentifierNode>("strtol");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, int>> node553 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, int>>(0.0, 8.98846567431158e+307, -2097);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, int>> node554 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, int>>(0.0, 1.0000000000000568, -16445);
std::shared_ptr<fbf::FunctionIdentifierNode> ldexp_ = std::make_shared<fbf::FunctionIdentifierNode>("ldexp");
std::shared_ptr<fbf::FunctionIdentifierNode> scalblnl_ = std::make_shared<fbf::FunctionIdentifierNode>("scalblnl");
std::shared_ptr<fbf::FunctionIdentifierNode> scalbln_ = std::make_shared<fbf::FunctionIdentifierNode>("scalbln");
std::shared_ptr<fbf::FunctionIdentifierNode> logb_ = std::make_shared<fbf::FunctionIdentifierNode>("logb");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, int>> node559 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, int>>(0.0, 0.0, -276);
std::shared_ptr<fbf::FunctionIdentifierNode> ldexpf_ = std::make_shared<fbf::FunctionIdentifierNode>("ldexpf");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, int>> node561 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, int>>(0.0, 3.6893488147419103e+19, -128);
std::shared_ptr<fbf::FunctionIdentifierNode> scalblnf_ = std::make_shared<fbf::FunctionIdentifierNode>("scalblnf");
std::shared_ptr<fbf::FunctionIdentifierNode> scalbnf_ = std::make_shared<fbf::FunctionIdentifierNode>("scalbnf");
std::shared_ptr<fbf::FunctionIdentifierNode> floorl_ = std::make_shared<fbf::FunctionIdentifierNode>("floorl");
std::shared_ptr<fbf::FunctionIdentifierNode> lgammal_r_ = std::make_shared<fbf::FunctionIdentifierNode>("lgammal_r");
std::shared_ptr<fbf::FunctionIdentifierNode> pread64_ = std::make_shared<fbf::FunctionIdentifierNode>("pread64");
std::shared_ptr<fbf::FunctionIdentifierNode> sinl_ = std::make_shared<fbf::FunctionIdentifierNode>("sinl");
std::shared_ptr<fbf::FunctionIdentifierNode> remquof_ = std::make_shared<fbf::FunctionIdentifierNode>("remquof");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_setspecific_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_setspecific");
std::shared_ptr<fbf::FunctionIdentifierNode> iconv_ = std::make_shared<fbf::FunctionIdentifierNode>("iconv");
std::shared_ptr<fbf::FunctionIdentifierNode> mkstemp64_ = std::make_shared<fbf::FunctionIdentifierNode>("mkstemp64");
std::shared_ptr<fbf::FunctionIdentifierNode> __isoc99_fscanf_ = std::make_shared<fbf::FunctionIdentifierNode>("__isoc99_fscanf");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node573 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-3.6893488147419103e+19, 3.6893488147419103e+19);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node574 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.0, -3.6893488147419103e+19);
std::shared_ptr<fbf::FunctionIdentifierNode> sinf_ = std::make_shared<fbf::FunctionIdentifierNode>("sinf");
std::shared_ptr<fbf::FunctionIdentifierNode> ceilf_ = std::make_shared<fbf::FunctionIdentifierNode>("ceilf");
std::shared_ptr<fbf::FunctionIdentifierNode> cosf_ = std::make_shared<fbf::FunctionIdentifierNode>("cosf");
std::shared_ptr<fbf::FunctionIdentifierNode> fegetround_ = std::make_shared<fbf::FunctionIdentifierNode>("fegetround");
char* buf_386 = (char*) malloc(1);
if(buf_386) { buffers_.push_back(buf_386); std::memcpy(buf_386, "", 0); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*>> node579 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*>>(12, buf_386);
std::shared_ptr<fbf::FunctionIdentifierNode> ftello64_ = std::make_shared<fbf::FunctionIdentifierNode>("ftello64");
std::shared_ptr<fbf::FunctionIdentifierNode> ftell_ = std::make_shared<fbf::FunctionIdentifierNode>("ftell");
std::shared_ptr<fbf::FunctionIdentifierNode> acosh_ = std::make_shared<fbf::FunctionIdentifierNode>("acosh");
std::shared_ptr<fbf::FunctionIdentifierNode> shmget_ = std::make_shared<fbf::FunctionIdentifierNode>("shmget");
std::shared_ptr<fbf::FunctionIdentifierNode> j1_ = std::make_shared<fbf::FunctionIdentifierNode>("j1");
std::shared_ptr<fbf::FunctionIdentifierNode> regexec_ = std::make_shared<fbf::FunctionIdentifierNode>("regexec");
std::shared_ptr<fbf::FunctionIdentifierNode> semop_ = std::make_shared<fbf::FunctionIdentifierNode>("semop");
std::shared_ptr<fbf::FunctionIdentifierNode> lgammaf_r_ = std::make_shared<fbf::FunctionIdentifierNode>("lgammaf_r");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node588 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(1.6629029268482283, -0.6787637026394024);
std::shared_ptr<fbf::FunctionIdentifierNode> erfcl_ = std::make_shared<fbf::FunctionIdentifierNode>("erfcl");
std::shared_ptr<fbf::FunctionIdentifierNode> erfc_ = std::make_shared<fbf::FunctionIdentifierNode>("erfc");
std::shared_ptr<fbf::FunctionIdentifierNode> frexpf_ = std::make_shared<fbf::FunctionIdentifierNode>("frexpf");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, double>> node592 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, double>>(4, 0.0);
std::shared_ptr<fbf::FunctionIdentifierNode> __fpclassify_ = std::make_shared<fbf::FunctionIdentifierNode>("__fpclassify");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, double>> node594 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, double>>(4, -42.0);
std::shared_ptr<fbf::FunctionIdentifierNode> __fpclassifyf_ = std::make_shared<fbf::FunctionIdentifierNode>("__fpclassifyf");
std::shared_ptr<fbf::FunctionIdentifierNode> __fpclassifyl_ = std::make_shared<fbf::FunctionIdentifierNode>("__fpclassifyl");
std::shared_ptr<fbf::FunctionIdentifierNode> raise_ = std::make_shared<fbf::FunctionIdentifierNode>("raise");
std::shared_ptr<fbf::FunctionIdentifierNode> hypotf_ = std::make_shared<fbf::FunctionIdentifierNode>("hypotf");
std::shared_ptr<fbf::FunctionIdentifierNode> memcmp_ = std::make_shared<fbf::FunctionIdentifierNode>("memcmp");
std::shared_ptr<fbf::FunctionIdentifierNode> remainderl_ = std::make_shared<fbf::FunctionIdentifierNode>("remainderl");
std::shared_ptr<fbf::FunctionIdentifierNode> atan2l_ = std::make_shared<fbf::FunctionIdentifierNode>("atan2l");
std::shared_ptr<fbf::FunctionIdentifierNode> asinhl_ = std::make_shared<fbf::FunctionIdentifierNode>("asinhl");
std::shared_ptr<fbf::FunctionIdentifierNode> sigprocmask_ = std::make_shared<fbf::FunctionIdentifierNode>("sigprocmask");
std::shared_ptr<fbf::FunctionIdentifierNode> asinl_ = std::make_shared<fbf::FunctionIdentifierNode>("asinl");
std::shared_ptr<fbf::FunctionIdentifierNode> wcslen_ = std::make_shared<fbf::FunctionIdentifierNode>("wcslen");
std::shared_ptr<fbf::FunctionIdentifierNode> drem_ = std::make_shared<fbf::FunctionIdentifierNode>("drem");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node607 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(22143.17280756723, 4.345239849338305);
std::shared_ptr<fbf::FunctionIdentifierNode> exp10l_ = std::make_shared<fbf::FunctionIdentifierNode>("exp10l");
std::shared_ptr<fbf::FunctionIdentifierNode> exp10_ = std::make_shared<fbf::FunctionIdentifierNode>("exp10");
std::shared_ptr<fbf::FunctionIdentifierNode> memmem_ = std::make_shared<fbf::FunctionIdentifierNode>("memmem");
std::shared_ptr<fbf::FunctionIdentifierNode> dlclose_ = std::make_shared<fbf::FunctionIdentifierNode>("dlclose");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node612 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(2.0, -0.0);
std::shared_ptr<fbf::FunctionIdentifierNode> log2f_ = std::make_shared<fbf::FunctionIdentifierNode>("log2f");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node614 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-3.6893488147419103e+19, 0.0);
std::shared_ptr<fbf::FunctionIdentifierNode> acosf_ = std::make_shared<fbf::FunctionIdentifierNode>("acosf");
std::shared_ptr<fbf::FunctionIdentifierNode> j1f_ = std::make_shared<fbf::FunctionIdentifierNode>("j1f");
std::shared_ptr<fbf::FunctionIdentifierNode> execv_ = std::make_shared<fbf::FunctionIdentifierNode>("execv");
std::shared_ptr<fbf::FunctionIdentifierNode> setstate_ = std::make_shared<fbf::FunctionIdentifierNode>("setstate");
std::shared_ptr<fbf::FunctionIdentifierNode> ynf_ = std::make_shared<fbf::FunctionIdentifierNode>("ynf");
std::shared_ptr<fbf::FunctionIdentifierNode> wcstol_ = std::make_shared<fbf::FunctionIdentifierNode>("wcstol");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, double>> node621 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, double>>(-1, -0.5);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, double>> node622 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, double>>(123456789, 123456789.1);
std::shared_ptr<fbf::FunctionIdentifierNode> llrint_ = std::make_shared<fbf::FunctionIdentifierNode>("llrint");
std::shared_ptr<fbf::FunctionIdentifierNode> lrint_ = std::make_shared<fbf::FunctionIdentifierNode>("lrint");
std::shared_ptr<fbf::FunctionIdentifierNode> llround_ = std::make_shared<fbf::FunctionIdentifierNode>("llround");
std::shared_ptr<fbf::FunctionIdentifierNode> trunc_ = std::make_shared<fbf::FunctionIdentifierNode>("trunc");
std::shared_ptr<fbf::FunctionIdentifierNode> fmax_ = std::make_shared<fbf::FunctionIdentifierNode>("fmax");
std::shared_ptr<fbf::FunctionIdentifierNode> memset_ = std::make_shared<fbf::FunctionIdentifierNode>("memset");
std::shared_ptr<fbf::FunctionIdentifierNode> j0_ = std::make_shared<fbf::FunctionIdentifierNode>("j0");
std::shared_ptr<fbf::FunctionIdentifierNode> scalbnl_ = std::make_shared<fbf::FunctionIdentifierNode>("scalbnl");
std::shared_ptr<fbf::FunctionIdentifierNode> fgets_ = std::make_shared<fbf::FunctionIdentifierNode>("fgets");
std::shared_ptr<fbf::FunctionIdentifierNode> fmemopen_ = std::make_shared<fbf::FunctionIdentifierNode>("fmemopen");
std::shared_ptr<fbf::FunctionIdentifierNode> jn_ = std::make_shared<fbf::FunctionIdentifierNode>("jn");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node634 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(0.0, -0.0, -2.0);
std::shared_ptr<fbf::FunctionIdentifierNode> dremf_ = std::make_shared<fbf::FunctionIdentifierNode>("dremf");
std::shared_ptr<fbf::FunctionIdentifierNode> scalbf_ = std::make_shared<fbf::FunctionIdentifierNode>("scalbf");
std::shared_ptr<fbf::FunctionIdentifierNode> sprintf_ = std::make_shared<fbf::FunctionIdentifierNode>("sprintf");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_mutex_lock_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_mutex_lock");
std::shared_ptr<fbf::FunctionIdentifierNode> strtof_ = std::make_shared<fbf::FunctionIdentifierNode>("strtof");
std::shared_ptr<fbf::FunctionIdentifierNode> sinhl_ = std::make_shared<fbf::FunctionIdentifierNode>("sinhl");
std::shared_ptr<fbf::FunctionIdentifierNode> dlsym_ = std::make_shared<fbf::FunctionIdentifierNode>("dlsym");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node642 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.0, 1e-09);
std::shared_ptr<fbf::FunctionIdentifierNode> atanf_ = std::make_shared<fbf::FunctionIdentifierNode>("atanf");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node644 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(3.6893488147419103e+19, -0.0);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node645 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.0, -0.0);
std::shared_ptr<fbf::FunctionIdentifierNode> log10f_ = std::make_shared<fbf::FunctionIdentifierNode>("log10f");
std::shared_ptr<fbf::FunctionIdentifierNode> asinf_ = std::make_shared<fbf::FunctionIdentifierNode>("asinf");
std::shared_ptr<fbf::FunctionIdentifierNode> sqrtf_ = std::make_shared<fbf::FunctionIdentifierNode>("sqrtf");
std::shared_ptr<fbf::FunctionIdentifierNode> fetestexcept_ = std::make_shared<fbf::FunctionIdentifierNode>("fetestexcept");
std::shared_ptr<fbf::FunctionIdentifierNode> fmodl_ = std::make_shared<fbf::FunctionIdentifierNode>("fmodl");
std::shared_ptr<fbf::FunctionIdentifierNode> srandom_ = std::make_shared<fbf::FunctionIdentifierNode>("srandom");
std::shared_ptr<fbf::FunctionIdentifierNode> wcsstr_ = std::make_shared<fbf::FunctionIdentifierNode>("wcsstr");
std::shared_ptr<fbf::FunctionIdentifierNode> fread_ = std::make_shared<fbf::FunctionIdentifierNode>("fread");
std::shared_ptr<fbf::FunctionIdentifierNode> dup2_ = std::make_shared<fbf::FunctionIdentifierNode>("dup2");
std::shared_ptr<fbf::FunctionIdentifierNode> lgamma_r_ = std::make_shared<fbf::FunctionIdentifierNode>("lgamma_r");
std::shared_ptr<fbf::FunctionIdentifierNode> inet_addr_ = std::make_shared<fbf::FunctionIdentifierNode>("inet_addr");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node657 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(0.0, 0.0, -0.0);
std::shared_ptr<fbf::FunctionIdentifierNode> fmin_ = std::make_shared<fbf::FunctionIdentifierNode>("fmin");
std::shared_ptr<fbf::FunctionIdentifierNode> fminl_ = std::make_shared<fbf::FunctionIdentifierNode>("fminl");
char* buf_387 = (char*) malloc(1);
if(buf_387) { buffers_.push_back(buf_387); std::memcpy(buf_387, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_388 = (char*) malloc(5);
if(buf_388) { buffers_.push_back(buf_388); std::memcpy(buf_388, "\x03\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*>> node660 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*>>(0, buf_387, buf_388);
char* buf_389 = (char*) malloc(1);
if(buf_389) { buffers_.push_back(buf_389); std::memcpy(buf_389, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_390 = (char*) malloc(1);
if(buf_390) { buffers_.push_back(buf_390); std::memcpy(buf_390, "", 0); } else { throw std::runtime_error("malloc failed"); }
char* buf_391 = (char*) malloc(5);
if(buf_391) { buffers_.push_back(buf_391); std::memcpy(buf_391, "\x00\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*>> node661 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, char*>>(0, buf_389, buf_390, buf_391);
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_mutexattr_gettype_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_mutexattr_gettype");
std::shared_ptr<fbf::FunctionIdentifierNode> sem_getvalue_ = std::make_shared<fbf::FunctionIdentifierNode>("sem_getvalue");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_condattr_getclock_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_condattr_getclock");
std::shared_ptr<fbf::FunctionIdentifierNode> fmaf_ = std::make_shared<fbf::FunctionIdentifierNode>("fmaf");
std::shared_ptr<fbf::FunctionIdentifierNode> tdelete_ = std::make_shared<fbf::FunctionIdentifierNode>("tdelete");
std::shared_ptr<fbf::FunctionIdentifierNode> sigtimedwait_ = std::make_shared<fbf::FunctionIdentifierNode>("sigtimedwait");
std::shared_ptr<fbf::FunctionIdentifierNode> fmodf_ = std::make_shared<fbf::FunctionIdentifierNode>("fmodf");
std::shared_ptr<fbf::FunctionIdentifierNode> sendto_ = std::make_shared<fbf::FunctionIdentifierNode>("sendto");
std::shared_ptr<fbf::FunctionIdentifierNode> wcstoul_ = std::make_shared<fbf::FunctionIdentifierNode>("wcstoul");
std::shared_ptr<fbf::FunctionIdentifierNode> strchr_ = std::make_shared<fbf::FunctionIdentifierNode>("strchr");
std::shared_ptr<fbf::FunctionIdentifierNode> sincosf_ = std::make_shared<fbf::FunctionIdentifierNode>("sincosf");
char* buf_392 = (char*) malloc(5);
if(buf_392) { buffers_.push_back(buf_392); std::memcpy(buf_392, "\xff\xff\xff\xff", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double, char*>> node673 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double, char*>>(-0.3557272017470065, 9.267056966972586, 4.811392084359796, buf_392);
std::shared_ptr<fbf::FunctionIdentifierNode> remquo_ = std::make_shared<fbf::FunctionIdentifierNode>("remquo");
std::shared_ptr<fbf::FunctionIdentifierNode> remquol_ = std::make_shared<fbf::FunctionIdentifierNode>("remquol");
std::shared_ptr<fbf::FunctionIdentifierNode> sqrt_ = std::make_shared<fbf::FunctionIdentifierNode>("sqrt");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node677 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(-0.0, 2.0, 0.0);
std::shared_ptr<fbf::FunctionIdentifierNode> nextafterf_ = std::make_shared<fbf::FunctionIdentifierNode>("nextafterf");
std::shared_ptr<fbf::FunctionIdentifierNode> atan2f_ = std::make_shared<fbf::FunctionIdentifierNode>("atan2f");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node680 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.9999999999999999, 1.7976931348623157e+308);
std::shared_ptr<fbf::FunctionIdentifierNode> tanhl_ = std::make_shared<fbf::FunctionIdentifierNode>("tanhl");
std::shared_ptr<fbf::FunctionIdentifierNode> tanh_ = std::make_shared<fbf::FunctionIdentifierNode>("tanh");
std::shared_ptr<fbf::FunctionIdentifierNode> hypotl_ = std::make_shared<fbf::FunctionIdentifierNode>("hypotl");
std::shared_ptr<fbf::FunctionIdentifierNode> exp2l_ = std::make_shared<fbf::FunctionIdentifierNode>("exp2l");
std::shared_ptr<fbf::FunctionIdentifierNode> inet_ntoa_ = std::make_shared<fbf::FunctionIdentifierNode>("inet_ntoa");
std::shared_ptr<fbf::FunctionIdentifierNode> msgctl_ = std::make_shared<fbf::FunctionIdentifierNode>("msgctl");
std::shared_ptr<fbf::FunctionIdentifierNode> cosl_ = std::make_shared<fbf::FunctionIdentifierNode>("cosl");
std::shared_ptr<fbf::FunctionIdentifierNode> sincos_ = std::make_shared<fbf::FunctionIdentifierNode>("sincos");
std::shared_ptr<fbf::FunctionIdentifierNode> lsearch_ = std::make_shared<fbf::FunctionIdentifierNode>("lsearch");
std::shared_ptr<fbf::FunctionIdentifierNode> sincosl_ = std::make_shared<fbf::FunctionIdentifierNode>("sincosl");
std::shared_ptr<fbf::FunctionIdentifierNode> hypot_ = std::make_shared<fbf::FunctionIdentifierNode>("hypot");
std::shared_ptr<fbf::FunctionIdentifierNode> inet_pton_ = std::make_shared<fbf::FunctionIdentifierNode>("inet_pton");
std::shared_ptr<fbf::FunctionIdentifierNode> fabsl_ = std::make_shared<fbf::FunctionIdentifierNode>("fabsl");
std::shared_ptr<fbf::FunctionIdentifierNode> tanl_ = std::make_shared<fbf::FunctionIdentifierNode>("tanl");
std::shared_ptr<fbf::FunctionIdentifierNode> unlink_ = std::make_shared<fbf::FunctionIdentifierNode>("unlink");
std::shared_ptr<fbf::FunctionIdentifierNode> fwrite_ = std::make_shared<fbf::FunctionIdentifierNode>("fwrite");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node697 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.0, 0.9999923706054688);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node698 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(1.0, 1.0000152587890625);
std::shared_ptr<fbf::FunctionIdentifierNode> ceill_ = std::make_shared<fbf::FunctionIdentifierNode>("ceill");
std::shared_ptr<fbf::FunctionIdentifierNode> round_ = std::make_shared<fbf::FunctionIdentifierNode>("round");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node701 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(17.0, 17.499999999999996);
std::shared_ptr<fbf::FunctionIdentifierNode> nearbyint_ = std::make_shared<fbf::FunctionIdentifierNode>("nearbyint");
std::shared_ptr<fbf::FunctionIdentifierNode> rint_ = std::make_shared<fbf::FunctionIdentifierNode>("rint");
std::shared_ptr<fbf::FunctionIdentifierNode> tfind_ = std::make_shared<fbf::FunctionIdentifierNode>("tfind");
std::shared_ptr<fbf::FunctionIdentifierNode> tgammal_ = std::make_shared<fbf::FunctionIdentifierNode>("tgammal");
std::shared_ptr<fbf::FunctionIdentifierNode> __ctype_get_mb_cur_max_ = std::make_shared<fbf::FunctionIdentifierNode>("__ctype_get_mb_cur_max");
std::shared_ptr<fbf::FunctionIdentifierNode> lgammal_ = std::make_shared<fbf::FunctionIdentifierNode>("lgammal");
std::shared_ptr<fbf::FunctionIdentifierNode> syscall_ = std::make_shared<fbf::FunctionIdentifierNode>("syscall");
std::shared_ptr<fbf::FunctionIdentifierNode> coshl_ = std::make_shared<fbf::FunctionIdentifierNode>("coshl");
std::shared_ptr<fbf::FunctionIdentifierNode> lgamma_ = std::make_shared<fbf::FunctionIdentifierNode>("lgamma");
std::shared_ptr<fbf::FunctionIdentifierNode> atanl_ = std::make_shared<fbf::FunctionIdentifierNode>("atanl");
std::shared_ptr<fbf::FunctionIdentifierNode> copysign_ = std::make_shared<fbf::FunctionIdentifierNode>("copysign");
std::shared_ptr<fbf::FunctionIdentifierNode> putenv_ = std::make_shared<fbf::FunctionIdentifierNode>("putenv");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_create_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_create");
std::shared_ptr<fbf::FunctionIdentifierNode> strcpy_ = std::make_shared<fbf::FunctionIdentifierNode>("strcpy");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node716 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(1e-09, 1e-09);
std::shared_ptr<fbf::FunctionIdentifierNode> logf_ = std::make_shared<fbf::FunctionIdentifierNode>("logf");
std::shared_ptr<fbf::FunctionIdentifierNode> tanhf_ = std::make_shared<fbf::FunctionIdentifierNode>("tanhf");
std::shared_ptr<fbf::FunctionIdentifierNode> _IO_getc_ = std::make_shared<fbf::FunctionIdentifierNode>("_IO_getc");
std::shared_ptr<fbf::FunctionIdentifierNode> ilogbf_ = std::make_shared<fbf::FunctionIdentifierNode>("ilogbf");
std::shared_ptr<fbf::FunctionIdentifierNode> fma_ = std::make_shared<fbf::FunctionIdentifierNode>("fma");
std::shared_ptr<fbf::FunctionIdentifierNode> setenv_ = std::make_shared<fbf::FunctionIdentifierNode>("setenv");
std::shared_ptr<fbf::FunctionIdentifierNode> atan2_ = std::make_shared<fbf::FunctionIdentifierNode>("atan2");
std::shared_ptr<fbf::FunctionIdentifierNode> expl_ = std::make_shared<fbf::FunctionIdentifierNode>("expl");
std::shared_ptr<fbf::FunctionIdentifierNode> shmat_ = std::make_shared<fbf::FunctionIdentifierNode>("shmat");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_cancel_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_cancel");
std::shared_ptr<fbf::FunctionIdentifierNode> strstr_ = std::make_shared<fbf::FunctionIdentifierNode>("strstr");
std::shared_ptr<fbf::FunctionIdentifierNode> inet_ntop_ = std::make_shared<fbf::FunctionIdentifierNode>("inet_ntop");
std::shared_ptr<fbf::FunctionIdentifierNode> modfl_ = std::make_shared<fbf::FunctionIdentifierNode>("modfl");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node730 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(4503599627370495.0, 4503599627370494.5);
std::shared_ptr<fbf::FunctionIdentifierNode> floor_ = std::make_shared<fbf::FunctionIdentifierNode>("floor");
std::shared_ptr<fbf::FunctionIdentifierNode> ceil_ = std::make_shared<fbf::FunctionIdentifierNode>("ceil");
std::shared_ptr<fbf::FunctionIdentifierNode> __isoc99_sscanf_ = std::make_shared<fbf::FunctionIdentifierNode>("__isoc99_sscanf");
std::shared_ptr<fbf::FunctionIdentifierNode> fmal_ = std::make_shared<fbf::FunctionIdentifierNode>("fmal");
std::shared_ptr<fbf::FunctionIdentifierNode> strverscmp_ = std::make_shared<fbf::FunctionIdentifierNode>("strverscmp");
std::shared_ptr<fbf::FunctionIdentifierNode> strlen_ = std::make_shared<fbf::FunctionIdentifierNode>("strlen");
std::shared_ptr<fbf::FunctionIdentifierNode> snprintf_ = std::make_shared<fbf::FunctionIdentifierNode>("snprintf");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_join_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_join");
std::shared_ptr<fbf::FunctionIdentifierNode> asinh_ = std::make_shared<fbf::FunctionIdentifierNode>("asinh");
std::shared_ptr<fbf::FunctionIdentifierNode> strsignal_ = std::make_shared<fbf::FunctionIdentifierNode>("strsignal");
std::shared_ptr<fbf::FunctionIdentifierNode> waitpid_ = std::make_shared<fbf::FunctionIdentifierNode>("waitpid");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node742 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.0009765625, -9.31322574615e-10);
std::shared_ptr<fbf::FunctionIdentifierNode> cbrt_ = std::make_shared<fbf::FunctionIdentifierNode>("cbrt");
std::shared_ptr<fbf::FunctionIdentifierNode> cbrtl_ = std::make_shared<fbf::FunctionIdentifierNode>("cbrtl");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node745 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-1e-09, -3.6893488147419103e+19);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node746 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-2.0, 2.0);
std::shared_ptr<fbf::FunctionIdentifierNode> sinhf_ = std::make_shared<fbf::FunctionIdentifierNode>("sinhf");
std::shared_ptr<fbf::FunctionIdentifierNode> coshf_ = std::make_shared<fbf::FunctionIdentifierNode>("coshf");
std::shared_ptr<fbf::FunctionIdentifierNode> expf_ = std::make_shared<fbf::FunctionIdentifierNode>("expf");
std::shared_ptr<fbf::FunctionIdentifierNode> write_ = std::make_shared<fbf::FunctionIdentifierNode>("write");
std::shared_ptr<fbf::FunctionIdentifierNode> cos_ = std::make_shared<fbf::FunctionIdentifierNode>("cos");
std::shared_ptr<fbf::FunctionIdentifierNode> mbrtowc_ = std::make_shared<fbf::FunctionIdentifierNode>("mbrtowc");
std::shared_ptr<fbf::FunctionIdentifierNode> semctl_ = std::make_shared<fbf::FunctionIdentifierNode>("semctl");
std::shared_ptr<fbf::FunctionIdentifierNode> tgamma_ = std::make_shared<fbf::FunctionIdentifierNode>("tgamma");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node755 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(7.806735726291634, 7.858890253041697, 0.05215452675006225);
std::shared_ptr<fbf::FunctionIdentifierNode> fdim_ = std::make_shared<fbf::FunctionIdentifierNode>("fdim");
std::shared_ptr<fbf::FunctionIdentifierNode> fdiml_ = std::make_shared<fbf::FunctionIdentifierNode>("fdiml");
std::shared_ptr<fbf::FunctionIdentifierNode> btowc_ = std::make_shared<fbf::FunctionIdentifierNode>("btowc");
std::shared_ptr<fbf::FunctionIdentifierNode> __xpg_basename_ = std::make_shared<fbf::FunctionIdentifierNode>("__xpg_basename");
std::shared_ptr<fbf::FunctionIdentifierNode> strncmp_ = std::make_shared<fbf::FunctionIdentifierNode>("strncmp");
std::shared_ptr<fbf::FunctionIdentifierNode> fork_ = std::make_shared<fbf::FunctionIdentifierNode>("fork");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double, double>> node762 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double, double>>(0.9999999999999999, 1.0, 0.9999999999999999);
std::shared_ptr<fbf::FunctionIdentifierNode> nexttoward_ = std::make_shared<fbf::FunctionIdentifierNode>("nexttoward");
std::shared_ptr<fbf::FunctionIdentifierNode> nextafter_ = std::make_shared<fbf::FunctionIdentifierNode>("nextafter");
std::shared_ptr<fbf::FunctionIdentifierNode> pthread_barrier_init_ = std::make_shared<fbf::FunctionIdentifierNode>("pthread_barrier_init");
std::shared_ptr<fbf::FunctionIdentifierNode> tan_ = std::make_shared<fbf::FunctionIdentifierNode>("tan");
std::shared_ptr<fbf::FunctionIdentifierNode> exp2_ = std::make_shared<fbf::FunctionIdentifierNode>("exp2");
std::shared_ptr<fbf::FunctionIdentifierNode> tsearch_ = std::make_shared<fbf::FunctionIdentifierNode>("tsearch");
std::shared_ptr<fbf::FunctionIdentifierNode> __errno_location_ = std::make_shared<fbf::FunctionIdentifierNode>("__errno_location");
std::shared_ptr<fbf::FunctionIdentifierNode> fabs_ = std::make_shared<fbf::FunctionIdentifierNode>("fabs");
std::shared_ptr<fbf::FunctionIdentifierNode> start_ = std::make_shared<fbf::FunctionIdentifierNode>("start");
std::shared_ptr<fbf::FunctionIdentifierNode> vsnprintf_ = std::make_shared<fbf::FunctionIdentifierNode>("vsnprintf");
std::shared_ptr<fbf::FunctionIdentifierNode> log2_ = std::make_shared<fbf::FunctionIdentifierNode>("log2");
std::shared_ptr<fbf::FunctionIdentifierNode> malloc_ = std::make_shared<fbf::FunctionIdentifierNode>("malloc");
std::shared_ptr<fbf::FunctionIdentifierNode> log_ = std::make_shared<fbf::FunctionIdentifierNode>("log");
std::shared_ptr<fbf::FunctionIdentifierNode> asin_ = std::make_shared<fbf::FunctionIdentifierNode>("asin");
std::shared_ptr<fbf::FunctionIdentifierNode> fnmatch_ = std::make_shared<fbf::FunctionIdentifierNode>("fnmatch");
std::shared_ptr<fbf::FunctionIdentifierNode> scalbn_ = std::make_shared<fbf::FunctionIdentifierNode>("scalbn");
std::shared_ptr<fbf::FunctionIdentifierNode> log1p_ = std::make_shared<fbf::FunctionIdentifierNode>("log1p");
std::shared_ptr<fbf::FunctionIdentifierNode> exp_ = std::make_shared<fbf::FunctionIdentifierNode>("exp");
std::shared_ptr<fbf::FunctionIdentifierNode> crypt_ = std::make_shared<fbf::FunctionIdentifierNode>("crypt");
std::shared_ptr<fbf::FunctionIdentifierNode> expm1_ = std::make_shared<fbf::FunctionIdentifierNode>("expm1");
std::shared_ptr<fbf::FunctionIdentifierNode> gmtime_ = std::make_shared<fbf::FunctionIdentifierNode>("gmtime");
std::shared_ptr<fbf::FunctionIdentifierNode> sinh_ = std::make_shared<fbf::FunctionIdentifierNode>("sinh");
std::shared_ptr<fbf::FunctionIdentifierNode> mmap64_ = std::make_shared<fbf::FunctionIdentifierNode>("mmap64");
std::shared_ptr<fbf::FunctionIdentifierNode> printf_ = std::make_shared<fbf::FunctionIdentifierNode>("printf");
std::shared_ptr<fbf::FunctionIdentifierNode> atan_ = std::make_shared<fbf::FunctionIdentifierNode>("atan");
std::shared_ptr<fbf::FunctionIdentifierNode> swprintf_ = std::make_shared<fbf::FunctionIdentifierNode>("swprintf");
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node789 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(2.9999999999999996, 1000.0);
std::shared_ptr<fbf::FunctionIdentifierNode> log10l_ = std::make_shared<fbf::FunctionIdentifierNode>("log10l");
std::shared_ptr<fbf::FunctionIdentifierNode> log10_ = std::make_shared<fbf::FunctionIdentifierNode>("log10");
std::shared_ptr<fbf::FunctionIdentifierNode> fputs_ = std::make_shared<fbf::FunctionIdentifierNode>("fputs");
std::shared_ptr<fbf::FunctionIdentifierNode> memcpy_ = std::make_shared<fbf::FunctionIdentifierNode>("memcpy");
std::shared_ptr<fbf::FunctionIdentifierNode> dup_ = std::make_shared<fbf::FunctionIdentifierNode>("dup");
std::shared_ptr<fbf::FunctionIdentifierNode> strcmp_ = std::make_shared<fbf::FunctionIdentifierNode>("strcmp");
std::shared_ptr<fbf::FunctionIdentifierNode> fmod_ = std::make_shared<fbf::FunctionIdentifierNode>("fmod");
std::shared_ptr<fbf::FunctionIdentifierNode> iconv_open_ = std::make_shared<fbf::FunctionIdentifierNode>("iconv_open");
std::shared_ptr<fbf::FunctionIdentifierNode> mktime_ = std::make_shared<fbf::FunctionIdentifierNode>("mktime");
std::shared_ptr<fbf::FunctionIdentifierNode> acos_ = std::make_shared<fbf::FunctionIdentifierNode>("acos");
std::shared_ptr<fbf::FunctionIdentifierNode> wctob_ = std::make_shared<fbf::FunctionIdentifierNode>("wctob");
std::shared_ptr<fbf::FunctionIdentifierNode> wcschr_ = std::make_shared<fbf::FunctionIdentifierNode>("wcschr");
std::shared_ptr<fbf::FunctionIdentifierNode> sin_ = std::make_shared<fbf::FunctionIdentifierNode>("sin");
std::shared_ptr<fbf::FunctionIdentifierNode> strtod_ = std::make_shared<fbf::FunctionIdentifierNode>("strtod");
std::shared_ptr<fbf::FunctionIdentifierNode> strftime_ = std::make_shared<fbf::FunctionIdentifierNode>("strftime");
std::shared_ptr<fbf::FunctionIdentifierNode> munmap_ = std::make_shared<fbf::FunctionIdentifierNode>("munmap");
std::shared_ptr<fbf::FunctionIdentifierNode> pow_ = std::make_shared<fbf::FunctionIdentifierNode>("pow");
std::shared_ptr<fbf::FunctionIdentifierNode> wcrtomb_ = std::make_shared<fbf::FunctionIdentifierNode>("wcrtomb");
std::shared_ptr<fbf::FunctionIdentifierNode> random_ = std::make_shared<fbf::FunctionIdentifierNode>("random");
std::shared_ptr<fbf::FunctionIdentifierNode> qsort_ = std::make_shared<fbf::FunctionIdentifierNode>("qsort");
std::shared_ptr<fbf::FunctionIdentifierNode> cosh_ = std::make_shared<fbf::FunctionIdentifierNode>("cosh");
root->set_pass_node(cosh_);
node1->set_pass_node(qsort_);
node2->set_pass_node(random_);
node3->set_pass_node(wcrtomb_);
node4->set_pass_node(pow_);
node5->set_pass_node(munmap_);
node6->set_pass_node(strftime_);
node7->set_pass_node(strtod_);
node8->set_pass_node(sin_);
node9->set_pass_node(wcschr_);
node10->set_pass_node(wctob_);
node11->set_pass_node(acos_);
node12->set_pass_node(mktime_);
node13->set_pass_node(iconv_open_);
node14->set_pass_node(fmod_);
node15->set_pass_node(strcmp_);
node16->set_pass_node(dup_);
node17->set_pass_node(memcpy_);
node18->set_pass_node(fputs_);
node19->set_pass_node(node789);
node20->set_pass_node(swprintf_);
node21->set_pass_node(atan_);
node22->set_pass_node(printf_);
node23->set_pass_node(mmap64_);
node24->set_pass_node(sinh_);
node25->set_pass_node(gmtime_);
node26->set_pass_node(expm1_);
node27->set_pass_node(crypt_);
node28->set_pass_node(exp_);
node29->set_pass_node(log1p_);
node30->set_pass_node(scalbn_);
node31->set_pass_node(fnmatch_);
node32->set_pass_node(asin_);
node33->set_pass_node(log_);
node34->set_pass_node(malloc_);
node35->set_pass_node(log2_);
node36->set_pass_node(vsnprintf_);
node37->set_pass_node(start_);
node38->set_pass_node(fabs_);
node39->set_pass_node(__errno_location_);
node40->set_pass_node(tsearch_);
node41->set_pass_node(exp2_);
node42->set_pass_node(tan_);
node43->set_pass_node(pthread_barrier_init_);
node44->set_pass_node(node762);
node45->set_pass_node(fork_);
node46->set_pass_node(strncmp_);
node47->set_pass_node(__xpg_basename_);
node48->set_pass_node(btowc_);
node49->set_pass_node(node755);
node50->set_pass_node(tgamma_);
node51->set_pass_node(semctl_);
node52->set_pass_node(mbrtowc_);
node53->set_pass_node(cos_);
node54->set_pass_node(write_);
node55->set_pass_node(node745);
node56->set_pass_node(node742);
node57->set_pass_node(waitpid_);
node58->set_pass_node(strsignal_);
node59->set_pass_node(asinh_);
node60->set_pass_node(pthread_join_);
node61->set_pass_node(snprintf_);
node62->set_pass_node(strlen_);
node63->set_pass_node(strverscmp_);
node64->set_pass_node(fmal_);
node65->set_pass_node(__isoc99_sscanf_);
node66->set_pass_node(node730);
node67->set_pass_node(modfl_);
node68->set_pass_node(inet_ntop_);
node69->set_pass_node(strstr_);
node70->set_pass_node(pthread_cancel_);
node71->set_pass_node(shmat_);
node72->set_pass_node(expl_);
node73->set_pass_node(atan2_);
node74->set_pass_node(setenv_);
node75->set_pass_node(fma_);
node76->set_pass_node(ilogbf_);
node77->set_pass_node(_IO_getc_);
node78->set_pass_node(node716);
node79->set_pass_node(strcpy_);
node80->set_pass_node(pthread_create_);
node81->set_pass_node(putenv_);
node82->set_pass_node(copysign_);
node83->set_pass_node(atanl_);
node84->set_pass_node(lgamma_);
node85->set_pass_node(coshl_);
node86->set_pass_node(syscall_);
node87->set_pass_node(lgammal_);
node88->set_pass_node(__ctype_get_mb_cur_max_);
node89->set_pass_node(tgammal_);
node90->set_pass_node(tfind_);
node91->set_pass_node(node697);
node92->set_pass_node(fwrite_);
node93->set_pass_node(unlink_);
node94->set_pass_node(tanl_);
node95->set_pass_node(fabsl_);
node96->set_pass_node(inet_pton_);
node97->set_pass_node(hypot_);
node98->set_pass_node(sincosl_);
node99->set_pass_node(lsearch_);
node100->set_pass_node(sincos_);
node101->set_pass_node(cosl_);
node102->set_pass_node(msgctl_);
node103->set_pass_node(inet_ntoa_);
node104->set_pass_node(exp2l_);
node105->set_pass_node(hypotl_);
node106->set_pass_node(node680);
node107->set_pass_node(node677);
node108->set_pass_node(sqrt_);
node109->set_pass_node(node673);
node110->set_pass_node(sincosf_);
node111->set_pass_node(strchr_);
node112->set_pass_node(wcstoul_);
node113->set_pass_node(sendto_);
node114->set_pass_node(fmodf_);
node115->set_pass_node(sigtimedwait_);
node116->set_pass_node(tdelete_);
node117->set_pass_node(fmaf_);
node118->set_pass_node(node660);
node119->set_pass_node(node657);
node120->set_pass_node(inet_addr_);
node121->set_pass_node(lgamma_r_);
node122->set_pass_node(dup2_);
node123->set_pass_node(fread_);
node124->set_pass_node(wcsstr_);
node125->set_pass_node(srandom_);
node126->set_pass_node(fmodl_);
node127->set_pass_node(fetestexcept_);
node128->set_pass_node(node642);
node129->set_pass_node(dlsym_);
node130->set_pass_node(sinhl_);
node131->set_pass_node(strtof_);
node132->set_pass_node(pthread_mutex_lock_);
node133->set_pass_node(sprintf_);
node134->set_pass_node(node634);
node135->set_pass_node(jn_);
node136->set_pass_node(fmemopen_);
node137->set_pass_node(fgets_);
node138->set_pass_node(scalbnl_);
node139->set_pass_node(j0_);
node140->set_pass_node(memset_);
node141->set_pass_node(fmax_);
node142->set_pass_node(trunc_);
node143->set_pass_node(node621);
node144->set_pass_node(wcstol_);
node145->set_pass_node(ynf_);
node146->set_pass_node(setstate_);
node147->set_pass_node(execv_);
node148->set_pass_node(node612);
node149->set_pass_node(dlclose_);
node150->set_pass_node(memmem_);
node151->set_pass_node(node607);
node152->set_pass_node(drem_);
node153->set_pass_node(wcslen_);
node154->set_pass_node(asinl_);
node155->set_pass_node(sigprocmask_);
node156->set_pass_node(asinhl_);
node157->set_pass_node(atan2l_);
node158->set_pass_node(remainderl_);
node159->set_pass_node(memcmp_);
node160->set_pass_node(hypotf_);
node161->set_pass_node(raise_);
node162->set_pass_node(node592);
node163->set_pass_node(frexpf_);
node164->set_pass_node(node588);
node165->set_pass_node(lgammaf_r_);
node166->set_pass_node(semop_);
node167->set_pass_node(regexec_);
node168->set_pass_node(j1_);
node169->set_pass_node(shmget_);
node170->set_pass_node(acosh_);
node171->set_pass_node(node579);
node172->set_pass_node(fegetround_);
node173->set_pass_node(node573);
node174->set_pass_node(__isoc99_fscanf_);
node175->set_pass_node(mkstemp64_);
node176->set_pass_node(iconv_);
node177->set_pass_node(pthread_setspecific_);
node178->set_pass_node(remquof_);
node179->set_pass_node(sinl_);
node180->set_pass_node(pread64_);
node181->set_pass_node(lgammal_r_);
node182->set_pass_node(floorl_);
node183->set_pass_node(node559);
node184->set_pass_node(logb_);
node185->set_pass_node(node553);
node186->set_pass_node(strtol_);
node187->set_pass_node(getenv_);
node188->set_pass_node(node548);
node189->set_pass_node(lrand48_);
node190->set_pass_node(node544);
node191->set_pass_node(node541);
node192->set_pass_node(mbsrtowcs_);
node193->set_pass_node(nexttowardf_);
node194->set_pass_node(powl_);
node195->set_pass_node(dlopen_);
node196->set_pass_node(expm1l_);
node197->set_pass_node(getsockname_);
node198->set_pass_node(socket_);
node199->set_pass_node(node529);
node200->set_pass_node(__sysv_signal_);
node201->set_pass_node(modf_);
node202->set_pass_node(dlerror_);
node203->set_pass_node(getpid_);
node204->set_pass_node(fmaxf_);
node205->set_pass_node(node519);
node206->set_pass_node(kill_);
node207->set_pass_node(frexp_);
node208->set_pass_node(acosl_);
node209->set_pass_node(popen_);
node210->set_pass_node(shmdt_);
node211->set_pass_node(y0_);
node212->set_pass_node(log1pf_);
node213->set_pass_node(remque_);
node214->set_pass_node(__dn_expand_);
node215->set_pass_node(open_memstream_);
node216->set_pass_node(scalb_);
node217->set_pass_node(msgsnd_);
node218->set_pass_node(dirname_);
node219->set_pass_node(strtold_);
node220->set_pass_node(open64_);
node221->set_pass_node(msgget_);
node222->set_pass_node(jnf_);
node223->set_pass_node(log1pl_);
node224->set_pass_node(sem_unlink_);
node225->set_pass_node(semget_);
node226->set_pass_node(nextafterl_);
node227->set_pass_node(node489);
node228->set_pass_node(node480);
node229->set_pass_node(fdimf_);
node230->set_pass_node(fcntl_);
node231->set_pass_node(fseek_);
node232->set_pass_node(sem_open_);
node233->set_pass_node(__posix_getopt_);
node234->set_pass_node(fprintf_);
node235->set_pass_node(node471);
node236->set_pass_node(close_);
node237->set_pass_node(insque_);
node238->set_pass_node(msgrcv_);
node239->set_pass_node(ungetc_);
node240->set_pass_node(wcscmp_);
node241->set_pass_node(node463);
node242->set_pass_node(twalk_);
node243->set_pass_node(log2l_);
node244->set_pass_node(getrlimit64_);
node245->set_pass_node(modff_);
node246->set_pass_node(lfind_);
node247->set_pass_node(sqrtl_);
node248->set_pass_node(fesetround_);
node249->set_pass_node(node453);
node250->set_pass_node(listen_);
node251->set_pass_node(posix_spawn_file_actions_adddup2_);
node252->set_pass_node(execl_);
node253->set_pass_node(fabsf_);
node254->set_pass_node(pthread_barrier_wait_);
node255->set_pass_node(__libc_current_sigrtmin_);
node256->set_pass_node(daemon_);
node257->set_pass_node(fgetc_);
node258->set_pass_node(rintf_);
node259->set_pass_node(shmctl_);
node260->set_pass_node(regerror_);
node261->set_pass_node(logl_);
node262->set_pass_node(_exit_);
node263->set_pass_node(fegetexceptflag_);
node264->set_pass_node(wcsncpy_);
node265->set_pass_node(posix_spawnp_);
node266->set_pass_node(sigaddset_);
node267->set_pass_node(node431);
node268->set_pass_node(fesetexceptflag_);
node269->set_pass_node(__isoc99_fwscanf_);
node270->set_pass_node(node426);
node271->set_pass_node(setlocale_);
node272->set_pass_node(pthread_rwlock_trywrlock_);
node273->set_pass_node(sigismember_);
node274->set_pass_node(sem_timedwait_);
node275->set_pass_node(node419);
node276->set_pass_node(pthread_getspecific_);
node277->set_pass_node(strcspn_);
node278->set_pass_node(fileno_);
node279->set_pass_node(getppid_);
node280->set_pass_node(yn_);
node281->set_pass_node(pthread_condattr_setclock_);
node282->set_pass_node(sem_post_);
node283->set_pass_node(pthread_once_);
node284->set_pass_node(setvbuf_);
node285->set_pass_node(_IO_putc_);
node286->set_pass_node(stat64_);
node287->set_pass_node(node405);
node288->set_pass_node(node402);
node289->set_pass_node(regcomp_);
node290->set_pass_node(htonl_);
node291->set_pass_node(posix_spawn_file_actions_addclose_);
node292->set_pass_node(nl_langinfo_);
node293->set_pass_node(statvfs64_);
node294->set_pass_node(wcscpy_);
node295->set_pass_node(node393);
node296->set_pass_node(ftok_);
node297->set_pass_node(acoshl_);
node298->set_pass_node(mkdtemp_);
node299->set_pass_node(pthread_detach_);
node300->set_pass_node(pipe_);
node301->set_pass_node(fdopen_);
node302->set_pass_node(recvfrom_);
node303->set_pass_node(iconv_close_);
node304->set_pass_node(fgetwc_);
node305->set_pass_node(node381);
node306->set_pass_node(initstate_);
node307->set_pass_node(strdup_);
node308->set_pass_node(sysconf_);
node309->set_pass_node(strtoll_);
node310->set_pass_node(y1_);
node311->set_pass_node(uselocale_);
node312->set_pass_node(accept_);
node313->set_pass_node(pthread_key_create_);
node314->set_pass_node(lseek64_);
node315->set_pass_node(connect_);
node316->set_pass_node(setsockopt_);
node317->set_pass_node(unsetenv_);
node318->set_pass_node(atol_);
node319->set_pass_node(sigaction_);
node320->set_pass_node(node364);
node321->set_pass_node(time_);
node322->set_pass_node(sem_init_);
node323->set_pass_node(pthread_cond_timedwait_);
node324->set_pass_node(node358);
node325->set_pass_node(free_);
node326->set_pass_node(strerror_);
node327->set_pass_node(clearenv_);
node328->set_pass_node(fstat64_);
node329->set_pass_node(strrchr_);
node330->set_pass_node(newlocale_);
node331->set_pass_node(geteuid_);
node332->set_pass_node(getpwnam_r_);
node333->set_pass_node(fseeko64_);
node334->set_pass_node(node346);
node335->set_pass_node(read_);
node336->set_pass_node(tmpfile64_);
node337->set_pass_node(pthread_atfork_);
node338->set_pass_node(bind_);
node339->set_pass_node(hcreate_);
node346->set_pass_node(clock_gettime_);
node358->set_pass_node(sem_trywait_);
node364->set_pass_node(pthread_key_delete_);
node381->set_pass_node(pthread_mutex_unlock_);
node393->set_pass_node(pthread_setcancelstate_);
node402->set_pass_node(sem_wait_);
node405->set_pass_node(nanosleep_);
node419->set_pass_node(feraiseexcept_);
node426->set_pass_node(f_);
node431->set_pass_node(acoshf_);
node432->set_pass_node(logbf_);
node453->set_pass_node(pthread_mutexattr_settype_);
node463->set_pass_node(atanhl_);
node471->set_pass_node(strtoul_);
node480->set_pass_node(tanf_);
node481->set_pass_node(node485);
node482->set_pass_node(erff_);
node485->set_pass_node(lgammaf_);
node489->set_pass_node(expm1f_);
node490->set_pass_node(node494);
node491->set_pass_node(exp10f_);
node494->set_pass_node(atanhf_);
node519->set_pass_node(y1f_);
node520->set_pass_node(exp2f_);
node529->set_pass_node(powf_);
node530->set_pass_node(fminf_);
node541->set_pass_node(erfl_);
node544->set_pass_node(ilogb_);
node548->set_pass_node(lrintf_);
node553->set_pass_node(scalbln_);
node554->set_pass_node(scalblnl_);
node559->set_pass_node(node561);
node561->set_pass_node(scalbnf_);
node573->set_pass_node(cosf_);
node574->set_pass_node(ceilf_);
node579->set_pass_node(ftell_);
node588->set_pass_node(erfc_);
node592->set_pass_node(node594);
node594->set_pass_node(__fpclassifyl_);
node607->set_pass_node(exp10_);
node612->set_pass_node(node614);
node614->set_pass_node(j1f_);
node621->set_pass_node(llround_);
node622->set_pass_node(lrint_);
node634->set_pass_node(scalbf_);
node642->set_pass_node(node644);
node644->set_pass_node(sqrtf_);
node645->set_pass_node(asinf_);
node657->set_pass_node(fminl_);
node660->set_pass_node(pthread_condattr_getclock_);
node661->set_pass_node(sem_getvalue_);
node673->set_pass_node(remquol_);
node677->set_pass_node(atan2f_);
node680->set_pass_node(tanh_);
node697->set_pass_node(node701);
node698->set_pass_node(round_);
node701->set_pass_node(rint_);
node716->set_pass_node(tanhf_);
node730->set_pass_node(ceil_);
node742->set_pass_node(cbrtl_);
node745->set_pass_node(expf_);
node746->set_pass_node(coshf_);
node755->set_pass_node(fdiml_);
node762->set_pass_node(nextafter_);
node789->set_pass_node(log10_);
root->set_fail_node(node1);
node1->set_fail_node(node2);
node2->set_fail_node(node3);
node3->set_fail_node(node4);
node4->set_fail_node(node5);
node5->set_fail_node(node6);
node6->set_fail_node(node7);
node7->set_fail_node(node8);
node8->set_fail_node(node9);
node9->set_fail_node(node10);
node10->set_fail_node(node11);
node11->set_fail_node(node12);
node12->set_fail_node(node13);
node13->set_fail_node(node14);
node14->set_fail_node(node15);
node15->set_fail_node(node16);
node16->set_fail_node(node17);
node17->set_fail_node(node18);
node18->set_fail_node(node19);
node19->set_fail_node(node20);
node20->set_fail_node(node21);
node21->set_fail_node(node22);
node22->set_fail_node(node23);
node23->set_fail_node(node24);
node24->set_fail_node(node25);
node25->set_fail_node(node26);
node26->set_fail_node(node27);
node27->set_fail_node(node28);
node28->set_fail_node(node29);
node29->set_fail_node(node30);
node30->set_fail_node(node31);
node31->set_fail_node(node32);
node32->set_fail_node(node33);
node33->set_fail_node(node34);
node34->set_fail_node(node35);
node35->set_fail_node(node36);
node36->set_fail_node(node37);
node37->set_fail_node(node38);
node38->set_fail_node(node39);
node39->set_fail_node(node40);
node40->set_fail_node(node41);
node41->set_fail_node(node42);
node42->set_fail_node(node43);
node43->set_fail_node(node44);
node44->set_fail_node(node45);
node45->set_fail_node(node46);
node46->set_fail_node(node47);
node47->set_fail_node(node48);
node48->set_fail_node(node49);
node49->set_fail_node(node50);
node50->set_fail_node(node51);
node51->set_fail_node(node52);
node52->set_fail_node(node53);
node53->set_fail_node(node54);
node54->set_fail_node(node55);
node55->set_fail_node(node56);
node56->set_fail_node(node57);
node57->set_fail_node(node58);
node58->set_fail_node(node59);
node59->set_fail_node(node60);
node60->set_fail_node(node61);
node61->set_fail_node(node62);
node62->set_fail_node(node63);
node63->set_fail_node(node64);
node64->set_fail_node(node65);
node65->set_fail_node(node66);
node66->set_fail_node(node67);
node67->set_fail_node(node68);
node68->set_fail_node(node69);
node69->set_fail_node(node70);
node70->set_fail_node(node71);
node71->set_fail_node(node72);
node72->set_fail_node(node73);
node73->set_fail_node(node74);
node74->set_fail_node(node75);
node75->set_fail_node(node76);
node76->set_fail_node(node77);
node77->set_fail_node(node78);
node78->set_fail_node(node79);
node79->set_fail_node(node80);
node80->set_fail_node(node81);
node81->set_fail_node(node82);
node82->set_fail_node(node83);
node83->set_fail_node(node84);
node84->set_fail_node(node85);
node85->set_fail_node(node86);
node86->set_fail_node(node87);
node87->set_fail_node(node88);
node88->set_fail_node(node89);
node89->set_fail_node(node90);
node90->set_fail_node(node91);
node91->set_fail_node(node92);
node92->set_fail_node(node93);
node93->set_fail_node(node94);
node94->set_fail_node(node95);
node95->set_fail_node(node96);
node96->set_fail_node(node97);
node97->set_fail_node(node98);
node98->set_fail_node(node99);
node99->set_fail_node(node100);
node100->set_fail_node(node101);
node101->set_fail_node(node102);
node102->set_fail_node(node103);
node103->set_fail_node(node104);
node104->set_fail_node(node105);
node105->set_fail_node(node106);
node106->set_fail_node(node107);
node107->set_fail_node(node108);
node108->set_fail_node(node109);
node109->set_fail_node(node110);
node110->set_fail_node(node111);
node111->set_fail_node(node112);
node112->set_fail_node(node113);
node113->set_fail_node(node114);
node114->set_fail_node(node115);
node115->set_fail_node(node116);
node116->set_fail_node(node117);
node117->set_fail_node(node118);
node118->set_fail_node(node119);
node119->set_fail_node(node120);
node120->set_fail_node(node121);
node121->set_fail_node(node122);
node122->set_fail_node(node123);
node123->set_fail_node(node124);
node124->set_fail_node(node125);
node125->set_fail_node(node126);
node126->set_fail_node(node127);
node127->set_fail_node(node128);
node128->set_fail_node(node129);
node129->set_fail_node(node130);
node130->set_fail_node(node131);
node131->set_fail_node(node132);
node132->set_fail_node(node133);
node133->set_fail_node(node134);
node134->set_fail_node(node135);
node135->set_fail_node(node136);
node136->set_fail_node(node137);
node137->set_fail_node(node138);
node138->set_fail_node(node139);
node139->set_fail_node(node140);
node140->set_fail_node(node141);
node141->set_fail_node(node142);
node142->set_fail_node(node143);
node143->set_fail_node(node144);
node144->set_fail_node(node145);
node145->set_fail_node(node146);
node146->set_fail_node(node147);
node147->set_fail_node(node148);
node148->set_fail_node(node149);
node149->set_fail_node(node150);
node150->set_fail_node(node151);
node151->set_fail_node(node152);
node152->set_fail_node(node153);
node153->set_fail_node(node154);
node154->set_fail_node(node155);
node155->set_fail_node(node156);
node156->set_fail_node(node157);
node157->set_fail_node(node158);
node158->set_fail_node(node159);
node159->set_fail_node(node160);
node160->set_fail_node(node161);
node161->set_fail_node(node162);
node162->set_fail_node(node163);
node163->set_fail_node(node164);
node164->set_fail_node(node165);
node165->set_fail_node(node166);
node166->set_fail_node(node167);
node167->set_fail_node(node168);
node168->set_fail_node(node169);
node169->set_fail_node(node170);
node170->set_fail_node(node171);
node171->set_fail_node(node172);
node172->set_fail_node(node173);
node173->set_fail_node(node174);
node174->set_fail_node(node175);
node175->set_fail_node(node176);
node176->set_fail_node(node177);
node177->set_fail_node(node178);
node178->set_fail_node(node179);
node179->set_fail_node(node180);
node180->set_fail_node(node181);
node181->set_fail_node(node182);
node182->set_fail_node(node183);
node183->set_fail_node(node184);
node184->set_fail_node(node185);
node185->set_fail_node(node186);
node186->set_fail_node(node187);
node187->set_fail_node(node188);
node188->set_fail_node(node189);
node189->set_fail_node(node190);
node190->set_fail_node(node191);
node191->set_fail_node(node192);
node192->set_fail_node(node193);
node193->set_fail_node(node194);
node194->set_fail_node(node195);
node195->set_fail_node(node196);
node196->set_fail_node(node197);
node197->set_fail_node(node198);
node198->set_fail_node(node199);
node199->set_fail_node(node200);
node200->set_fail_node(node201);
node201->set_fail_node(node202);
node202->set_fail_node(node203);
node203->set_fail_node(node204);
node204->set_fail_node(node205);
node205->set_fail_node(node206);
node206->set_fail_node(node207);
node207->set_fail_node(node208);
node208->set_fail_node(node209);
node209->set_fail_node(node210);
node210->set_fail_node(node211);
node211->set_fail_node(node212);
node212->set_fail_node(node213);
node213->set_fail_node(node214);
node214->set_fail_node(node215);
node215->set_fail_node(node216);
node216->set_fail_node(node217);
node217->set_fail_node(node218);
node218->set_fail_node(node219);
node219->set_fail_node(node220);
node220->set_fail_node(node221);
node221->set_fail_node(node222);
node222->set_fail_node(node223);
node223->set_fail_node(node224);
node224->set_fail_node(node225);
node225->set_fail_node(node226);
node226->set_fail_node(node227);
node227->set_fail_node(node228);
node228->set_fail_node(node229);
node229->set_fail_node(node230);
node230->set_fail_node(node231);
node231->set_fail_node(node232);
node232->set_fail_node(node233);
node233->set_fail_node(node234);
node234->set_fail_node(node235);
node235->set_fail_node(node236);
node236->set_fail_node(node237);
node237->set_fail_node(node238);
node238->set_fail_node(node239);
node239->set_fail_node(node240);
node240->set_fail_node(node241);
node241->set_fail_node(node242);
node242->set_fail_node(node243);
node243->set_fail_node(node244);
node244->set_fail_node(node245);
node245->set_fail_node(node246);
node246->set_fail_node(node247);
node247->set_fail_node(node248);
node248->set_fail_node(node249);
node249->set_fail_node(node250);
node250->set_fail_node(node251);
node251->set_fail_node(node252);
node252->set_fail_node(node253);
node253->set_fail_node(node254);
node254->set_fail_node(node255);
node255->set_fail_node(node256);
node256->set_fail_node(node257);
node257->set_fail_node(node258);
node258->set_fail_node(node259);
node259->set_fail_node(node260);
node260->set_fail_node(node261);
node261->set_fail_node(node262);
node262->set_fail_node(node263);
node263->set_fail_node(node264);
node264->set_fail_node(node265);
node265->set_fail_node(node266);
node266->set_fail_node(node267);
node267->set_fail_node(node268);
node268->set_fail_node(node269);
node269->set_fail_node(node270);
node270->set_fail_node(node271);
node271->set_fail_node(node272);
node272->set_fail_node(node273);
node273->set_fail_node(node274);
node274->set_fail_node(node275);
node275->set_fail_node(node276);
node276->set_fail_node(node277);
node277->set_fail_node(node278);
node278->set_fail_node(node279);
node279->set_fail_node(node280);
node280->set_fail_node(node281);
node281->set_fail_node(node282);
node282->set_fail_node(node283);
node283->set_fail_node(node284);
node284->set_fail_node(node285);
node285->set_fail_node(node286);
node286->set_fail_node(node287);
node287->set_fail_node(node288);
node288->set_fail_node(node289);
node289->set_fail_node(node290);
node290->set_fail_node(node291);
node291->set_fail_node(node292);
node292->set_fail_node(node293);
node293->set_fail_node(node294);
node294->set_fail_node(node295);
node295->set_fail_node(node296);
node296->set_fail_node(node297);
node297->set_fail_node(node298);
node298->set_fail_node(node299);
node299->set_fail_node(node300);
node300->set_fail_node(node301);
node301->set_fail_node(node302);
node302->set_fail_node(node303);
node303->set_fail_node(node304);
node304->set_fail_node(node305);
node305->set_fail_node(node306);
node306->set_fail_node(node307);
node307->set_fail_node(node308);
node308->set_fail_node(node309);
node309->set_fail_node(node310);
node310->set_fail_node(node311);
node311->set_fail_node(node312);
node312->set_fail_node(node313);
node313->set_fail_node(node314);
node314->set_fail_node(node315);
node315->set_fail_node(node316);
node316->set_fail_node(node317);
node317->set_fail_node(node318);
node318->set_fail_node(node319);
node319->set_fail_node(node320);
node320->set_fail_node(node321);
node321->set_fail_node(node322);
node322->set_fail_node(node323);
node323->set_fail_node(node324);
node324->set_fail_node(node325);
node325->set_fail_node(node326);
node326->set_fail_node(node327);
node327->set_fail_node(node328);
node328->set_fail_node(node329);
node329->set_fail_node(node330);
node330->set_fail_node(node331);
node331->set_fail_node(node332);
node332->set_fail_node(node333);
node333->set_fail_node(node334);
node334->set_fail_node(node335);
node335->set_fail_node(node336);
node336->set_fail_node(node337);
node337->set_fail_node(node338);
node338->set_fail_node(node339);
node339->set_fail_node(pthread_mutex_init_);
node346->set_fail_node(fputc_);
node358->set_fail_node(sigemptyset_);
node364->set_fail_node(iswspace_);
node381->set_fail_node(feof_);
node393->set_fail_node(pthread_setcanceltype_);
node402->set_fail_node(rewind_);
node405->set_fail_node(pthread_mutex_timedlock_);
node419->set_fail_node(feclearexcept_);
node426->set_fail_node(tzset_);
node431->set_fail_node(node432);
node432->set_fail_node(y0f_);
node453->set_fail_node(pthread_mutexattr_setrobust_);
node463->set_fail_node(atanh_);
node471->set_fail_node(strtoull_);
node480->set_fail_node(node481);
node481->set_fail_node(node482);
node482->set_fail_node(j0f_);
node485->set_fail_node(cbrtf_);
node489->set_fail_node(node490);
node490->set_fail_node(node491);
node491->set_fail_node(asinhf_);
node494->set_fail_node(erfcf_);
node519->set_fail_node(node520);
node520->set_fail_node(tgammaf_);
node529->set_fail_node(node530);
node530->set_fail_node(copysignf_);
node541->set_fail_node(erf_);
node544->set_fail_node(ilogbl_);
node548->set_fail_node(llrintf_);
node553->set_fail_node(node554);
node554->set_fail_node(ldexp_);
node559->set_fail_node(ldexpf_);
node561->set_fail_node(scalblnf_);
node573->set_fail_node(node574);
node574->set_fail_node(sinf_);
node579->set_fail_node(ftello64_);
node588->set_fail_node(erfcl_);
node592->set_fail_node(__fpclassify_);
node594->set_fail_node(__fpclassifyf_);
node607->set_fail_node(exp10l_);
node612->set_fail_node(log2f_);
node614->set_fail_node(acosf_);
node621->set_fail_node(node622);
node622->set_fail_node(llrint_);
node634->set_fail_node(dremf_);
node642->set_fail_node(atanf_);
node644->set_fail_node(node645);
node645->set_fail_node(log10f_);
node657->set_fail_node(fmin_);
node660->set_fail_node(node661);
node661->set_fail_node(pthread_mutexattr_gettype_);
node673->set_fail_node(remquo_);
node677->set_fail_node(nextafterf_);
node680->set_fail_node(tanhl_);
node697->set_fail_node(node698);
node698->set_fail_node(ceill_);
node701->set_fail_node(nearbyint_);
node716->set_fail_node(logf_);
node730->set_fail_node(floor_);
node742->set_fail_node(cbrt_);
node745->set_fail_node(node746);
node746->set_fail_node(sinhf_);
node755->set_fail_node(fdim_);
node762->set_fail_node(nexttoward_);
node789->set_fail_node(log10l_);
