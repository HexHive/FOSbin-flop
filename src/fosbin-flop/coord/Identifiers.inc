std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> root = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-0.784401895638441870595, sizeof(double), std::vector<size_t>({sizeof(double)}), std::make_tuple(-56292896009528539589759829489969305546283139670574719680115159670026836317731077290970361592686647745092108233325885690136056653388197135732654129599387058378741758878175378790355566592.000000000000000000000), std::make_tuple(-56292896009528539589759829489969305546283139670574719680115159670026836317731077290970361592686647745092108233325885690136056653388197135732654129599387058378741758878175378790355566592.000000000000000000000));
char* buf_0 = (char*) malloc(9);
if(buf_0) { buffers_.push_back(buf_0); std::memcpy(buf_0, "\x63\x64\x00\x61\x62\x63\x20\x61", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_1 = (char*) malloc(6);
if(buf_1) { buffers_.push_back(buf_1); std::memcpy(buf_1, "\x61\x62\x63\x64\x00", 5); } else { throw std::runtime_error("malloc failed"); }
char* buf_2 = (char*) malloc(3);
if(buf_2) { buffers_.push_back(buf_2); std::memcpy(buf_2, "\x63\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_3 = (char*) malloc(6);
if(buf_3) { buffers_.push_back(buf_3); std::memcpy(buf_3, "\x61\x62\x63\x64\x00", 5); } else { throw std::runtime_error("malloc failed"); }
char* buf_4 = (char*) malloc(3);
if(buf_4) { buffers_.push_back(buf_4); std::memcpy(buf_4, "\x63\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int, char*, int>> node1 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int, char*, int>>(buf_0, 8, std::vector<size_t>({5,sizeof(int),2,sizeof(int)}), std::make_tuple(buf_1,4,buf_2,1), std::make_tuple(buf_3,4,buf_4,1));
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node2 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(2.152427707317640770413, sizeof(double), std::vector<size_t>({sizeof(double)}), std::make_tuple(-1.400802682163860168884), std::make_tuple(-1.400802682163860168884));
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node3 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.001523527935944376903, sizeof(double), std::vector<size_t>({sizeof(double)}), std::make_tuple(0.001523528525331264072), std::make_tuple(0.001523528525331264072));
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node4 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(-1.051957475048984402832, sizeof(double), std::vector<size_t>({sizeof(double)}), std::make_tuple(-0.917640055047812652766), std::make_tuple(-0.917640055047812652766));
char* buf_5 = (char*) malloc(9);
if(buf_5) { buffers_.push_back(buf_5); std::memcpy(buf_5, "\x61\x62\x62\x00\x61\x61\x61\x61", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_6 = (char*) malloc(10);
if(buf_6) { buffers_.push_back(buf_6); std::memcpy(buf_6, "\x61\x61\x61\x61\x61\x61\x61\x61\x00", 9); } else { throw std::runtime_error("malloc failed"); }
char* buf_7 = (char*) malloc(5);
if(buf_7) { buffers_.push_back(buf_7); std::memcpy(buf_7, "\x61\x62\x62\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_8 = (char*) malloc(10);
if(buf_8) { buffers_.push_back(buf_8); std::memcpy(buf_8, "\x61\x62\x62\x00\x61\x61\x61\x61\x00", 9); } else { throw std::runtime_error("malloc failed"); }
char* buf_9 = (char*) malloc(5);
if(buf_9) { buffers_.push_back(buf_9); std::memcpy(buf_9, "\x61\x62\x62\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*, int>> node5 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*, int>>(buf_5, 8, std::vector<size_t>({9,4,sizeof(int)}), std::make_tuple(buf_6,buf_7,4), std::make_tuple(buf_8,buf_9,4));
char* buf_10 = (char*) malloc(9);
if(buf_10) { buffers_.push_back(buf_10); std::memcpy(buf_10, "\x2f\xf3\xa5\x6c\xed\x7a\xcf\xbf", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_11 = (char*) malloc(9);
if(buf_11) { buffers_.push_back(buf_11); std::memcpy(buf_11, "\x9c\x6a\x68\xa6\x62\x04\xef\x3f", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_12 = (char*) malloc(9);
if(buf_12) { buffers_.push_back(buf_12); std::memcpy(buf_12, "\xc4\xe3\xfa\x05\xcd\x1a\xc4\x3f", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_13 = (char*) malloc(9);
if(buf_13) { buffers_.push_back(buf_13); std::memcpy(buf_13, "\xb7\x29\x58\xbe\x51\x9a\xef\xbf", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<void, double, char*, char*>> node6 = std::make_shared<fbf::FunctionIdentifierInternalNode<void, double, char*, char*>>(std::vector<size_t>({sizeof(double),8,8}), std::make_tuple(9.267056966972585740905,buf_10,buf_11), std::make_tuple(9.267056966972585740905,buf_12,buf_13));
char* buf_14 = (char*) malloc(5);
if(buf_14) { buffers_.push_back(buf_14); std::memcpy(buf_14, "\x31\x31\x32\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_15 = (char*) malloc(5);
if(buf_15) { buffers_.push_back(buf_15); std::memcpy(buf_15, "\x31\x31\x32\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_16 = (char*) malloc(5);
if(buf_16) { buffers_.push_back(buf_16); std::memcpy(buf_16, "\x31\x31\x32\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_17 = (char*) malloc(5);
if(buf_17) { buffers_.push_back(buf_17); std::memcpy(buf_17, "\x31\x31\x32\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node7 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(0, sizeof(int), std::vector<size_t>({4,4,sizeof(int)}), std::make_tuple(buf_14,buf_15,4), std::make_tuple(buf_16,buf_17,4));
std::shared_ptr<fbf::FunctionIdentifierInternalNode<float, float>> node8 = std::make_shared<fbf::FunctionIdentifierInternalNode<float, float>>(-2.000000000f, sizeof(float), std::vector<size_t>({sizeof(float)}), std::make_tuple(-2.000000000f), std::make_tuple(-2.000000000f));
std::shared_ptr<fbf::FunctionIdentifierInternalNode<float, float>> node9 = std::make_shared<fbf::FunctionIdentifierInternalNode<float, float>>(-36893488147419103232.000000000f, sizeof(float), std::vector<size_t>({sizeof(float)}), std::make_tuple(36893488147419103232.000000000f), std::make_tuple(36893488147419103232.000000000f));
std::shared_ptr<fbf::FunctionIdentifierInternalNode<long double, long double>> node10 = std::make_shared<fbf::FunctionIdentifierInternalNode<long double, long double>>(0.715013928995238301489l, sizeof(long double), std::vector<size_t>({sizeof(long double)}), std::make_tuple(0.774152296591303690221l), std::make_tuple(0.774152296591303690221l));
char* buf_18 = (char*) malloc(5);
if(buf_18) { buffers_.push_back(buf_18); std::memcpy(buf_18, "\x62\xd7\x7b\xbe", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_19 = (char*) malloc(5);
if(buf_19) { buffers_.push_back(buf_19); std::memcpy(buf_19, "\x16\x23\x78\x3f", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_20 = (char*) malloc(5);
if(buf_20) { buffers_.push_back(buf_20); std::memcpy(buf_20, "\x4a\xd6\x20\x3e", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_21 = (char*) malloc(5);
if(buf_21) { buffers_.push_back(buf_21); std::memcpy(buf_21, "\x8f\xd2\x7c\xbf", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<void, float, char*, char*>> node11 = std::make_shared<fbf::FunctionIdentifierInternalNode<void, float, char*, char*>>(std::vector<size_t>({sizeof(float),4,4}), std::make_tuple(-2.000000000f,buf_18,buf_19), std::make_tuple(-2.000000000f,buf_20,buf_21));
std::shared_ptr<fbf::FunctionIdentifierInternalNode<long double, long double>> node12 = std::make_shared<fbf::FunctionIdentifierInternalNode<long double, long double>>(0.614684486011344732859l, sizeof(long double), std::vector<size_t>({sizeof(long double)}), std::make_tuple(0.661985898099504477265l), std::make_tuple(0.661985898099504477265l));
std::shared_ptr<fbf::FunctionIdentifierInternalNode<float, float>> node13 = std::make_shared<fbf::FunctionIdentifierInternalNode<float, float>>(-2.000000000f, sizeof(float), std::vector<size_t>({sizeof(float)}), std::make_tuple(2.000000000f), std::make_tuple(2.000000000f));
char* buf_22 = (char*) malloc(9);
if(buf_22) { buffers_.push_back(buf_22); std::memcpy(buf_22, "\x00\x00\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_23 = (char*) malloc(2);
if(buf_23) { buffers_.push_back(buf_23); std::memcpy(buf_23, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
char* buf_24 = (char*) malloc(2);
if(buf_24) { buffers_.push_back(buf_24); std::memcpy(buf_24, "\x00", 1); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int, int>> node14 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int, int>>(buf_22, 8, std::vector<size_t>({1,sizeof(int),sizeof(int)}), std::make_tuple(buf_23,0,32), std::make_tuple(buf_24,0,32));
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node15 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(1.000000000000000000000, sizeof(double), std::vector<size_t>({sizeof(double)}), std::make_tuple(0E-21), std::make_tuple(0E-21));
std::shared_ptr<fbf::FunctionIdentifierInternalNode<long double, long double>> node16 = std::make_shared<fbf::FunctionIdentifierInternalNode<long double, long double>>(0.591775593545123546058l, sizeof(long double), std::vector<size_t>({sizeof(long double)}), std::make_tuple(0.561759746220724109911l), std::make_tuple(0.561759746220724109911l));
char* buf_25 = (char*) malloc(11);
if(buf_25) { buffers_.push_back(buf_25); std::memcpy(buf_25, "\x95\x7e\xce\x65\x08\x2a\x35\xdd\xfe\xbf", 10); } else { throw std::runtime_error("malloc failed"); }
char* buf_26 = (char*) malloc(11);
if(buf_26) { buffers_.push_back(buf_26); std::memcpy(buf_26, "\xb7\xe1\xa0\x20\x00\x70\xda\x80\xfe\xbf", 10); } else { throw std::runtime_error("malloc failed"); }
char* buf_27 = (char*) malloc(11);
if(buf_27) { buffers_.push_back(buf_27); std::memcpy(buf_27, "\xc9\x0e\x99\x2f\x65\x6b\xd7\xfb\xfc\xbf", 10); } else { throw std::runtime_error("malloc failed"); }
char* buf_28 = (char*) malloc(11);
if(buf_28) { buffers_.push_back(buf_28); std::memcpy(buf_28, "\x71\xea\x54\x43\x33\x15\x23\xf8\xfe\x3f", 10); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<void, long double, char*, char*>> node54 = std::make_shared<fbf::FunctionIdentifierInternalNode<void, long double, char*, char*>>(std::vector<size_t>({sizeof(long double),10,10}), std::make_tuple(-6.531673581913484127881l,buf_25,buf_26), std::make_tuple(-6.531673581913484127881l,buf_27,buf_28));
std::shared_ptr<fbf::FunctionIdentifierNode> sincosl_ = std::make_shared<fbf::FunctionIdentifierNode>("sincosl", node54);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<long double, long double>> node55 = std::make_shared<fbf::FunctionIdentifierInternalNode<long double, long double>>(0.853829200885254269160l, sizeof(long double), std::vector<size_t>({sizeof(long double)}), std::make_tuple(0.774152296591303690221l), std::make_tuple(0.774152296591303690221l));
std::shared_ptr<fbf::FunctionIdentifierNode> sinhl_ = std::make_shared<fbf::FunctionIdentifierNode>("sinhl", node55);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<long double, long double>> node56 = std::make_shared<fbf::FunctionIdentifierInternalNode<long double, long double>>(1.161980358317507677768l, sizeof(long double), std::vector<size_t>({sizeof(long double)}), std::make_tuple(0.561759746220724109911l), std::make_tuple(0.561759746220724109911l));
std::shared_ptr<fbf::FunctionIdentifierNode> coshl_ = std::make_shared<fbf::FunctionIdentifierNode>("coshl", node56);
char* buf_29 = (char*) malloc(9);
if(buf_29) { buffers_.push_back(buf_29); std::memcpy(buf_29, "\x00\x00\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_30 = (char*) malloc(5);
if(buf_30) { buffers_.push_back(buf_30); std::memcpy(buf_30, "\x6e\x61\x6e\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_31 = (char*) malloc(5);
if(buf_31) { buffers_.push_back(buf_31); std::memcpy(buf_31, "\x00\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int, int>> node57 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int, int>>(buf_29, 8, std::vector<size_t>({4,sizeof(int),sizeof(int)}), std::make_tuple(buf_30,0,32), std::make_tuple(buf_31,0,32));
std::shared_ptr<fbf::FunctionIdentifierNode> memset_ = std::make_shared<fbf::FunctionIdentifierNode>("memset", node57);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<float, float>> node58 = std::make_shared<fbf::FunctionIdentifierInternalNode<float, float>>(-2.000000000f, sizeof(float), std::vector<size_t>({sizeof(float)}), std::make_tuple(2.000000000f), std::make_tuple(2.000000000f));
std::shared_ptr<fbf::FunctionIdentifierNode> coshf_ = std::make_shared<fbf::FunctionIdentifierNode>("coshf", node58);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<long double, long double>> node59 = std::make_shared<fbf::FunctionIdentifierInternalNode<long double, long double>>(0E-21l, sizeof(long double), std::vector<size_t>({sizeof(long double)}), std::make_tuple(0E-21l), std::make_tuple(0E-21l));
std::shared_ptr<fbf::FunctionIdentifierNode> sinl_ = std::make_shared<fbf::FunctionIdentifierNode>("sinl", node59);
char* buf_32 = (char*) malloc(5);
if(buf_32) { buffers_.push_back(buf_32); std::memcpy(buf_32, "\x00\x00\x00\x00", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_33 = (char*) malloc(5);
if(buf_33) { buffers_.push_back(buf_33); std::memcpy(buf_33, "\x00\x00\x80\x3f", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_34 = (char*) malloc(5);
if(buf_34) { buffers_.push_back(buf_34); std::memcpy(buf_34, "\x00\x00\x00\x80", 4); } else { throw std::runtime_error("malloc failed"); }
char* buf_35 = (char*) malloc(5);
if(buf_35) { buffers_.push_back(buf_35); std::memcpy(buf_35, "\x00\x00\x80\x3f", 4); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<void, float, char*, char*>> node60 = std::make_shared<fbf::FunctionIdentifierInternalNode<void, float, char*, char*>>(std::vector<size_t>({sizeof(float),4,4}), std::make_tuple(0E-9f,buf_32,buf_33), std::make_tuple(0E-9f,buf_34,buf_35));
std::shared_ptr<fbf::FunctionIdentifierNode> sincosf_ = std::make_shared<fbf::FunctionIdentifierNode>("sincosf", node60);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<long double, long double>> node61 = std::make_shared<fbf::FunctionIdentifierInternalNode<long double, long double>>(0.788773086924857591562l, sizeof(long double), std::vector<size_t>({sizeof(long double)}), std::make_tuple(0.661985898099504477265l), std::make_tuple(0.661985898099504477265l));
std::shared_ptr<fbf::FunctionIdentifierNode> cosl_ = std::make_shared<fbf::FunctionIdentifierNode>("cosl", node61);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<float, float>> node62 = std::make_shared<fbf::FunctionIdentifierInternalNode<float, float>>(-36893488147419103232.000000000f, sizeof(float), std::vector<size_t>({sizeof(float)}), std::make_tuple(-2.000000000f), std::make_tuple(-2.000000000f));
std::shared_ptr<fbf::FunctionIdentifierNode> cosf_ = std::make_shared<fbf::FunctionIdentifierNode>("cosf", node62);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<float, float>> node26 = std::make_shared<fbf::FunctionIdentifierInternalNode<float, float>>(2.000000000f, sizeof(float), std::vector<size_t>({sizeof(float)}), std::make_tuple(-2.000000000f), std::make_tuple(-2.000000000f));
std::shared_ptr<fbf::FunctionIdentifierInternalNode<float, float>> node64 = std::make_shared<fbf::FunctionIdentifierInternalNode<float, float>>(2.000000000f, sizeof(float), std::vector<size_t>({sizeof(float)}), std::make_tuple(-36893488147419103232.000000000f), std::make_tuple(-36893488147419103232.000000000f));
std::shared_ptr<fbf::FunctionIdentifierNode> sinhf_ = std::make_shared<fbf::FunctionIdentifierNode>("sinhf", node64);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<float, float>> node65 = std::make_shared<fbf::FunctionIdentifierInternalNode<float, float>>(0E-9f, sizeof(float), std::vector<size_t>({sizeof(float)}), std::make_tuple(0E-9f), std::make_tuple(0E-9f));
std::shared_ptr<fbf::FunctionIdentifierNode> sinf_ = std::make_shared<fbf::FunctionIdentifierNode>("sinf", node65);
char* buf_36 = (char*) malloc(10);
if(buf_36) { buffers_.push_back(buf_36); std::memcpy(buf_36, "\x31\x32\x33\x34\x35\x36\x37\x38\x00", 9); } else { throw std::runtime_error("malloc failed"); }
char* buf_37 = (char*) malloc(10);
if(buf_37) { buffers_.push_back(buf_37); std::memcpy(buf_37, "\x31\x32\x33\x34\x35\x36\x37\x38\x00", 9); } else { throw std::runtime_error("malloc failed"); }
char* buf_38 = (char*) malloc(10);
if(buf_38) { buffers_.push_back(buf_38); std::memcpy(buf_38, "\x31\x32\x33\x34\x35\x36\x37\x38\x00", 9); } else { throw std::runtime_error("malloc failed"); }
char* buf_39 = (char*) malloc(10);
if(buf_39) { buffers_.push_back(buf_39); std::memcpy(buf_39, "\x31\x32\x33\x34\x35\x36\x37\x38\x00", 9); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node66 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(0, sizeof(int), std::vector<size_t>({9,9,sizeof(int)}), std::make_tuple(buf_36,buf_37,9), std::make_tuple(buf_38,buf_39,9));
std::shared_ptr<fbf::FunctionIdentifierNode> memcmp_ = std::make_shared<fbf::FunctionIdentifierNode>("memcmp", node66);
char* buf_40 = (char*) malloc(9);
if(buf_40) { buffers_.push_back(buf_40); std::memcpy(buf_40, "\x0e\x55\x5f\x3a\xaf\x0b\xe1\x3f", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_41 = (char*) malloc(9);
if(buf_41) { buffers_.push_back(buf_41); std::memcpy(buf_41, "\xb1\x95\x77\xae\x0b\x15\xeb\x3f", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_42 = (char*) malloc(9);
if(buf_42) { buffers_.push_back(buf_42); std::memcpy(buf_42, "\xb2\x1d\x59\x5e\x1c\x5f\xe6\x3f", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_43 = (char*) malloc(9);
if(buf_43) { buffers_.push_back(buf_43); std::memcpy(buf_43, "\x2b\x02\x27\xe4\x64\xe1\xe6\x3f", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<void, double, char*, char*>> node67 = std::make_shared<fbf::FunctionIdentifierInternalNode<void, double, char*, char*>>(std::vector<size_t>({sizeof(double),8,8}), std::make_tuple(0.774152296591303690221,buf_40,buf_41), std::make_tuple(0.774152296591303690221,buf_42,buf_43));
std::shared_ptr<fbf::FunctionIdentifierNode> sincos_ = std::make_shared<fbf::FunctionIdentifierNode>("sincos", node67);
char* buf_44 = (char*) malloc(9);
if(buf_44) { buffers_.push_back(buf_44); std::memcpy(buf_44, "\x61\x61\x61\x61\x61\x62\x62\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_45 = (char*) malloc(15);
if(buf_45) { buffers_.push_back(buf_45); std::memcpy(buf_45, "\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x61\x62\x62\x00", 14); } else { throw std::runtime_error("malloc failed"); }
char* buf_46 = (char*) malloc(9);
if(buf_46) { buffers_.push_back(buf_46); std::memcpy(buf_46, "\x61\x61\x61\x61\x61\x62\x62\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_47 = (char*) malloc(15);
if(buf_47) { buffers_.push_back(buf_47); std::memcpy(buf_47, "\x61\x61\x61\x61\x61\x62\x62\x00\x61\x61\x61\x62\x62\x00", 14); } else { throw std::runtime_error("malloc failed"); }
char* buf_48 = (char*) malloc(9);
if(buf_48) { buffers_.push_back(buf_48); std::memcpy(buf_48, "\x61\x61\x61\x61\x61\x62\x62\x00", 8); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, char*, int>> node68 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, char*, int>>(buf_44, 8, std::vector<size_t>({14,8,sizeof(int)}), std::make_tuple(buf_45,buf_46,8), std::make_tuple(buf_47,buf_48,8));
std::shared_ptr<fbf::FunctionIdentifierNode> memcpy_ = std::make_shared<fbf::FunctionIdentifierNode>("memcpy", node68);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node69 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(3.21889608578475E-7, sizeof(double), std::vector<size_t>({sizeof(double)}), std::make_tuple(3.21889608578470E-7), std::make_tuple(3.21889608578470E-7));
std::shared_ptr<fbf::FunctionIdentifierNode> sinh_ = std::make_shared<fbf::FunctionIdentifierNode>("sinh", node69);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node70 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.674574826148265915826, sizeof(double), std::vector<size_t>({sizeof(double)}), std::make_tuple(2.401204058253101347731), std::make_tuple(2.401204058253101347731));
std::shared_ptr<fbf::FunctionIdentifierNode> sin_ = std::make_shared<fbf::FunctionIdentifierNode>("sin", node70);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node71 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(596417936619461452759040.000000000000000000000, sizeof(double), std::vector<size_t>({sizeof(double)}), std::make_tuple(55.438375790687906885524), std::make_tuple(55.438375790687906885524));
std::shared_ptr<fbf::FunctionIdentifierNode> cosh_ = std::make_shared<fbf::FunctionIdentifierNode>("cosh", node71);
char* buf_49 = (char*) malloc(9);
if(buf_49) { buffers_.push_back(buf_49); std::memcpy(buf_49, "\x00\x00\x00\x00\x00\x00\x00\x00", 8); } else { throw std::runtime_error("malloc failed"); }
char* buf_50 = (char*) malloc(3);
if(buf_50) { buffers_.push_back(buf_50); std::memcpy(buf_50, "\x61\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_51 = (char*) malloc(3);
if(buf_51) { buffers_.push_back(buf_51); std::memcpy(buf_51, "\x61\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_52 = (char*) malloc(3);
if(buf_52) { buffers_.push_back(buf_52); std::memcpy(buf_52, "\x61\x00", 2); } else { throw std::runtime_error("malloc failed"); }
char* buf_53 = (char*) malloc(3);
if(buf_53) { buffers_.push_back(buf_53); std::memcpy(buf_53, "\x61\x00", 2); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<char*, char*, int, char*, int>> node72 = std::make_shared<fbf::FunctionIdentifierInternalNode<char*, char*, int, char*, int>>(buf_49, 8, std::vector<size_t>({2,sizeof(int),2,sizeof(int)}), std::make_tuple(buf_50,0,buf_51,1), std::make_tuple(buf_52,0,buf_53,1));
std::shared_ptr<fbf::FunctionIdentifierNode> memmem_ = std::make_shared<fbf::FunctionIdentifierNode>("memmem", node72);
std::shared_ptr<fbf::FunctionIdentifierInternalNode<double, double>> node73 = std::make_shared<fbf::FunctionIdentifierInternalNode<double, double>>(0.001257030551569064420, sizeof(double), std::vector<size_t>({sizeof(double)}), std::make_tuple(1.569539295912282916845), std::make_tuple(1.569539295912282916845));
std::shared_ptr<fbf::FunctionIdentifierNode> cos_ = std::make_shared<fbf::FunctionIdentifierNode>("cos", node73);
root->set_pass_node(cos_);
node1->set_pass_node(memmem_);
node2->set_pass_node(cosh_);
node3->set_pass_node(sin_);
node4->set_pass_node(sinh_);
node5->set_pass_node(memcpy_);
node6->set_pass_node(sincos_);
node7->set_pass_node(memcmp_);
node8->set_pass_node(node26);
node9->set_pass_node(cosf_);
node10->set_pass_node(cosl_);
node11->set_pass_node(sincosf_);
node12->set_pass_node(sinl_);
node13->set_pass_node(coshf_);
node14->set_pass_node(memset_);
node15->set_pass_node(coshl_);
node16->set_pass_node(sinhl_);
node26->set_pass_node(sinf_);
root->set_fail_node(node1);
node1->set_fail_node(node2);
node2->set_fail_node(node3);
node3->set_fail_node(node4);
node4->set_fail_node(node5);
node5->set_fail_node(node6);
node6->set_fail_node(node7);
node7->set_fail_node(node8);
node8->set_fail_node(node9);
node9->set_fail_node(node10);
node10->set_fail_node(node11);
node11->set_fail_node(node12);
node12->set_fail_node(node13);
node13->set_fail_node(node14);
node14->set_fail_node(node15);
node15->set_fail_node(node16);
node16->set_fail_node(sincosl_);
node26->set_fail_node(sinhf_);
