char* buf_0 = (char*) malloc(129);
if(buf_0) { buffers_.push_back(buf_0); std::memcpy(buf_0, "\x68\xc4\xeb\x02\x00\x00\x00\x00\x70\xc4\xeb\x02\x00\x00\x00\x00\x78\xc4\xeb\x02\x00\x00\x00\x00\x80\xc4\xeb\x02\x00\x00\x00\x00\x88\xc4\xeb\x02\x00\x00\x00\x00\x90\xc4\xeb\x02\x00\x00\x00\x00\x98\xc4\xeb\x02\x00\x00\x00\x00\xa0\xc4\xeb\x02\x00\x00\x00\x00\xa8\xc4\xeb\x02\x00\x00\x00\x00\xb0\xc4\xeb\x02\x00\x00\x00\x00\xb8\xc4\xeb\x02\x00\x00\x00\x00\xc0\xc4\xeb\x02\x00\x00\x00\x00\xc8\xc4\xeb\x02\x00\x00\x00\x00\xd0\xc4\xeb\x02\x00\x00\x00\x00\xd8\xc4\xeb\x02\x00\x00\x00\x00\x60\xc4\xeb\x02\x00\x00\x00\x00", 128); } else { throw std::runtime_error("malloc failed"); }
char* buf_1 = (char*) malloc(129);
if(buf_1) { buffers_.push_back(buf_1); std::memcpy(buf_1, "\x05\xe3\xce\x42\x00\x00\x00\x00\x70\xc4\xeb\x02\x00\x00\x00\x00\x78\xc4\xeb\x02\x00\x00\x00\x00\x80\xc4\xeb\x02\x00\x00\x00\x00\x88\xc4\xeb\x02\x00\x00\x00\x00\x90\xc4\xeb\x02\x00\x00\x00\x00\x98\xc4\xeb\x02\x00\x00\x00\x00\xa0\xc4\xeb\x02\x00\x00\x00\x00\xa8\xc4\xeb\x02\x00\x00\x00\x00\xb0\xc4\xeb\x02\x00\x00\x00\x00\xb8\xc4\xeb\x02\x00\x00\x00\x00\xc0\xc4\xeb\x02\x00\x00\x00\x00\xc8\xc4\xeb\x02\x00\x00\x00\x00\xd0\xc4\xeb\x02\x00\x00\x00\x00\xd8\xc4\xeb\x02\x00\x00\x00\x00\x60\xc4\xeb\x02\x00\x00\x00\x00", 128); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<void, char*, float, double>> root = std::make_shared<fbf::FunctionIdentifierInternalNode<void, char*, float, double>>(std::vector<size_t>({128,sizeof(float),sizeof(double)}), std::make_tuple(buf_0,103.443f,77.2370572695124), std::make_tuple(buf_1,103.443f,77.2370572695124));
char* buf_2 = (char*) malloc(129);
if(buf_2) { buffers_.push_back(buf_2); std::memcpy(buf_2, "\x68\xc4\xeb\x02\x00\x00\x00\x00\x70\xc4\xeb\x02\x00\x00\x00\x00\x78\xc4\xeb\x02\x00\x00\x00\x00\x80\xc4\xeb\x02\x00\x00\x00\x00\x88\xc4\xeb\x02\x00\x00\x00\x00\x90\xc4\xeb\x02\x00\x00\x00\x00\x98\xc4\xeb\x02\x00\x00\x00\x00\xa0\xc4\xeb\x02\x00\x00\x00\x00\xa8\xc4\xeb\x02\x00\x00\x00\x00\xb0\xc4\xeb\x02\x00\x00\x00\x00\xb8\xc4\xeb\x02\x00\x00\x00\x00\xc0\xc4\xeb\x02\x00\x00\x00\x00\xc8\xc4\xeb\x02\x00\x00\x00\x00\xd0\xc4\xeb\x02\x00\x00\x00\x00\xd8\xc4\xeb\x02\x00\x00\x00\x00\x60\xc4\xeb\x02\x00\x00\x00\x00", 128); } else { throw std::runtime_error("malloc failed"); }
char* buf_3 = (char*) malloc(129);
if(buf_3) { buffers_.push_back(buf_3); std::memcpy(buf_3, "\x98\x0b\xec\x02\x00\x00\x00\x00\xa0\x0b\xec\x02\x00\x00\x00\x00\xa8\x0b\xec\x02\x00\x00\x00\x00\xb0\x0b\xec\x02\x00\x00\x00\x00\xb8\x0b\xec\x02\x00\x00\x00\x00\xc0\x0b\xec\x02\x00\x00\x00\x00\xc8\x0b\xec\x02\x00\x00\x00\x00\xd0\x0b\xec\x02\x00\x00\x00\x00\xd8\x0b\xec\x02\x00\x00\x00\x00\xe0\x0b\xec\x02\x00\x00\x00\x00\xe8\x0b\xec\x02\x00\x00\x00\x00\xf0\x0b\xec\x02\x00\x00\x00\x00\xf8\x0b\xec\x02\x00\x00\x00\x00\x00\x0c\xec\x02\x00\x00\x00\x00\x08\x0c\xec\x02\x00\x00\x00\x00\x90\x0b\xec\x02\x00\x00\x00\x00", 128); } else { throw std::runtime_error("malloc failed"); }
char* buf_4 = (char*) malloc(129);
if(buf_4) { buffers_.push_back(buf_4); std::memcpy(buf_4, "\x98\x0b\xec\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd0\xc4\xeb\x02\x00\x00\x00\x00\xd8\xc4\xeb\x02\x00\x00\x00\x00\x60\xc4\xeb\x02\x00\x00\x00\x00", 128); } else { throw std::runtime_error("malloc failed"); }
char* buf_5 = (char*) malloc(129);
if(buf_5) { buffers_.push_back(buf_5); std::memcpy(buf_5, "\x98\x0b\xec\x02\x00\x00\x00\x00\xa0\x0b\xec\x02\x00\x00\x00\x00\xa8\x0b\xec\x02\x00\x00\x00\x00\xb0\x0b\xec\x02\x00\x00\x00\x00\xb8\x0b\xec\x02\x00\x00\x00\x00\xc0\x0b\xec\x02\x00\x00\x00\x00\xc8\x0b\xec\x02\x00\x00\x00\x00\xd0\x0b\xec\x02\x00\x00\x00\x00\xd8\x0b\xec\x02\x00\x00\x00\x00\xe0\x0b\xec\x02\x00\x00\x00\x00\xe8\x0b\xec\x02\x00\x00\x00\x00\xf0\x0b\xec\x02\x00\x00\x00\x00\xf8\x0b\xec\x02\x00\x00\x00\x00\x00\x0c\xec\x02\x00\x00\x00\x00\x08\x0c\xec\x02\x00\x00\x00\x00\x90\x0b\xec\x02\x00\x00\x00\x00", 128); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>> node4 = std::make_shared<fbf::FunctionIdentifierInternalNode<int, char*, char*, int>>(536891776, sizeof(int), std::vector<size_t>({128,128,sizeof(int)}), std::make_tuple(buf_2,buf_3,104), std::make_tuple(buf_4,buf_5,104));
std::shared_ptr<fbf::FunctionIdentifierNode> strncpy_ = std::make_shared<fbf::FunctionIdentifierNode>("strncpy", node4);
char* buf_6 = (char*) malloc(129);
if(buf_6) { buffers_.push_back(buf_6); std::memcpy(buf_6, "\x68\xf4\xc0\x02\x00\x00\x00\x00\x70\xf4\xc0\x02\x00\x00\x00\x00\x78\xf4\xc0\x02\x00\x00\x00\x00\x80\xf4\xc0\x02\x00\x00\x00\x00\x88\xf4\xc0\x02\x00\x00\x00\x00\x90\xf4\xc0\x02\x00\x00\x00\x00\x98\xf4\xc0\x02\x00\x00\x00\x00\xa0\xf4\xc0\x02\x00\x00\x00\x00\xa8\xf4\xc0\x02\x00\x00\x00\x00\xb0\xf4\xc0\x02\x00\x00\x00\x00\xb8\xf4\xc0\x02\x00\x00\x00\x00\xc0\xf4\xc0\x02\x00\x00\x00\x00\xc8\xf4\xc0\x02\x00\x00\x00\x00\xd0\xf4\xc0\x02\x00\x00\x00\x00\xd8\xf4\xc0\x02\x00\x00\x00\x00\x60\xf4\xc0\x02\x00\x00\x00\x00", 128); } else { throw std::runtime_error("malloc failed"); }
char* buf_7 = (char*) malloc(129);
if(buf_7) { buffers_.push_back(buf_7); std::memcpy(buf_7, "\xfa\x93\x9b\x42\x00\x00\x00\x00\x70\xf4\xc0\x02\x00\x00\x00\x00\x78\xf4\xc0\x02\x00\x00\x00\x00\x80\xf4\xc0\x02\x00\x00\x00\x00\x88\xf4\xc0\x02\x00\x00\x00\x00\x90\xf4\xc0\x02\x00\x00\x00\x00\x98\xf4\xc0\x02\x00\x00\x00\x00\xa0\xf4\xc0\x02\x00\x00\x00\x00\xa8\xf4\xc0\x02\x00\x00\x00\x00\xb0\xf4\xc0\x02\x00\x00\x00\x00\xb8\xf4\xc0\x02\x00\x00\x00\x00\xc0\xf4\xc0\x02\x00\x00\x00\x00\xc8\xf4\xc0\x02\x00\x00\x00\x00\xd0\xf4\xc0\x02\x00\x00\x00\x00\xd8\xf4\xc0\x02\x00\x00\x00\x00\x60\xf4\xc0\x02\x00\x00\x00\x00", 128); } else { throw std::runtime_error("malloc failed"); }
std::shared_ptr<fbf::FunctionIdentifierInternalNode<void, float, char*, double>> node5 = std::make_shared<fbf::FunctionIdentifierInternalNode<void, float, char*, double>>(std::vector<size_t>({sizeof(float),128,sizeof(double)}), std::make_tuple(77.789f,buf_6,7.94758169245169), std::make_tuple(77.789f,buf_7,7.94758169245169));
std::shared_ptr<fbf::FunctionIdentifierNode> sincos_ = std::make_shared<fbf::FunctionIdentifierNode>("sincos", node5);
root->set_pass_node(sincos_);
root->set_fail_node(strncpy_);
